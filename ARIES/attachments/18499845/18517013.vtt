WEBVTT

1
00:01:45.420 --> 00:01:46.530
George Mulhearn: Hello!

2
00:01:51.570 --> 00:01:52.440
Patrik Stas: Oh,

3
00:01:52.740 --> 00:02:01.410
Patrik Stas: can you hear me now? Yeah, I can hear you. Yeah, let's uh, let's see if uh somebody's gonna to come back to that

4
00:02:01.700 --> 00:02:04.669
Patrik Stas: A few more minutes last week. It was one that show.

5
00:02:04.730 --> 00:02:21.330
Patrik Stas: Uh it was just me I was it? Oh, it was fine. I just turned it into kind of a podcast. But I found out uh that I think the recording was not actually uploaded from that week, so i'm not with somebody from a hyper ledger.

6
00:02:21.430 --> 00:02:24.310
Patrik Stas: Okay, so

7
00:02:24.700 --> 00:02:41.829
Patrik Stas: sorry. Has has some of the agenda from that week being pushed to this week because of that? Oh, yeah, not really. I just covered the the last week. It's in that, you know, sort of on my own uh assuming that it's recording, and uh somebody will watch it later

8
00:02:42.060 --> 00:02:45.340
Patrik Stas: there wasn't so many points.

9
00:02:45.500 --> 00:03:00.949
Patrik Stas: But yeah, I was talking about a bit about the transport return route, which um was asking before about. So as for that I I I came to a conclusion that that there might have to be a bit of a

10
00:03:01.230 --> 00:03:11.870
Patrik Stas: like restructuring, and the the State mission lever level done to make the Api be more granular. Uh, because right now there's on the on the

11
00:03:12.120 --> 00:03:15.010
Patrik Stas: on the State Mission level. There's some

12
00:03:15.090 --> 00:03:29.160
Patrik Stas: There's not. There's a state transition. But there's also like networking calls, which is not completely clean, I would say, But yeah, it's it's ten ten o two, so i'll like officially start now. Uh: so

13
00:03:29.350 --> 00:03:32.000
Patrik Stas: um, i'll share my screen.

14
00:03:37.590 --> 00:03:38.510
Um:

15
00:03:39.040 --> 00:03:43.379
Patrik Stas: Okay, I'm using a different Uh Pc. Now. So

16
00:03:43.610 --> 00:03:46.459
Patrik Stas: I need to give uh access

17
00:03:47.730 --> 00:03:50.320
Patrik Stas: access to the screen

18
00:03:51.050 --> 00:03:53.600
Patrik Stas: for for zoom.

19
00:03:58.020 --> 00:03:59.670
Patrik Stas: Hopefully, I don't have to.

20
00:03:59.790 --> 00:04:13.710
George Mulhearn: Yeah, I went. I went through this struggle about a week or two ago, the new computer for my permissions around. I I feel like It's gonna ask me to yeah to reconnect. So i'll be back in a second.

21
00:06:00.350 --> 00:06:04.330
Patrik Stas: All right. I'm back here. My apologies for a hiccups.

22
00:06:08.230 --> 00:06:10.110
Patrik Stas: Okay, Um.

23
00:06:24.820 --> 00:06:36.549
Patrik Stas: Okay? Well, it's a two of us for George. Uh, we'll come to that uh two thousand and twenty to eleven ten or is the six minutes go um obligatory. I have to uh um

24
00:06:36.650 --> 00:06:40.999
Patrik Stas: to go through the anti-trust policy of hyper ledger, so

25
00:06:41.900 --> 00:06:43.470
Patrik Stas: our Linux on

26
00:06:44.450 --> 00:06:54.540
Patrik Stas: by no competitors and this intention of Linux foundation to conduct all of its activities in accordance with applicable antitrust and competition laws.

27
00:06:54.550 --> 00:07:06.090
Patrik Stas: It is therefore extremely important that attendees adhere to meeting agendas, and be aware of, and not participate in, any activities that are prohibited under applicable us State

28
00:07:06.100 --> 00:07:17.859
Patrik Stas: federal or foreign, into anti-trust and competition laws. Examples of these of types of actions that are prohibited at Linux foundation meetings and in connection with

29
00:07:18.460 --> 00:07:24.059
Patrik Stas: Linux foundation activities are described in Linux foundation. Antitrust policy available

30
00:07:24.070 --> 00:07:40.089
Patrik Stas: at the link displayed on the screen on the screen. If you have questions about these matters, please contact your company and council, or if you are a member of Linux foundation feel free to contact Andrew up the for all of the firm of Justmer up the graph llp which provides

31
00:07:41.820 --> 00:07:54.000
Patrik Stas: um Yeah. Legal counsel for a legal Council to link foundation. I I saw that it was my Internet connection or something like that. But luckily i'm still here.

32
00:07:54.380 --> 00:07:59.530
Patrik Stas: Okay, So uh. So now we can go through the agenda. So

33
00:07:59.810 --> 00:08:06.359
Patrik Stas: uh we haven't actually uh get so much stuff emerge, or since the since the last week.

34
00:08:06.440 --> 00:08:08.050
Patrik Stas: Uh

35
00:08:09.000 --> 00:08:10.180
Patrik Stas: um,

36
00:08:10.770 --> 00:08:27.750
Patrik Stas: but uh, as we speak uh, we had. We had a bunch of updates previous week. I'll just remind that we had release uh zero point four, five, which includes, like included bunch of refactoring and some new Apis

37
00:08:28.090 --> 00:08:32.189
Patrik Stas: um, and like new features and improvements.

38
00:08:32.299 --> 00:08:33.620
Patrik Stas: Um,

39
00:08:33.830 --> 00:08:41.460
Patrik Stas: But for this week, yeah, probably the only sort of uh pr we have managed was uh

40
00:08:41.640 --> 00:08:48.979
Patrik Stas: from middle style. Uh, and it was uh it was additional apis

41
00:08:49.310 --> 00:08:58.320
Patrik Stas: uh which are more relevant for the issue or like institution uh role. Uh,

42
00:08:58.690 --> 00:09:01.660
Patrik Stas: and this i'll see the Pr.

43
00:09:01.720 --> 00:09:03.010
Patrik Stas: Um.

44
00:09:08.460 --> 00:09:11.140
Patrik Stas: So the one was uh

45
00:09:11.600 --> 00:09:14.259
Patrik Stas: the one this Pr. Over here

46
00:09:14.930 --> 00:09:17.520
Patrik Stas: uh is basically

47
00:09:17.640 --> 00:09:22.769
Patrik Stas: uh, well, if I open up the Api, so it's it's clear

48
00:09:24.190 --> 00:09:28.629
Patrik Stas: on the live Vcx level. It will be quite

49
00:09:28.830 --> 00:09:47.400
Patrik Stas: clear to see. Uh. So yeah, So we've added new Api to um create connections from connection requests. This Api is a bit more uh general than the the the original V one which you have now, uh deprecated

50
00:09:47.470 --> 00:09:58.939
Patrik Stas: in favor of the in favor of the V two Uh. Originally this Api was uh requesting this agent handle um

51
00:09:59.040 --> 00:10:10.529
Patrik Stas: object uh abstraction. Um, But uh, yeah, we kind of generalized it, and we only required a minimal set of info

52
00:10:10.540 --> 00:10:23.170
Patrik Stas: uh to Bootstrap. You connection from from collection request that, being a pairwise info, which is a did and verify uh which uh

53
00:10:23.700 --> 00:10:26.969
Patrik Stas: which the um Let's see

54
00:10:27.270 --> 00:10:33.129
Patrik Stas: um, which has been used by um,

55
00:10:34.690 --> 00:10:35.880
Patrik Stas: the

56
00:10:37.700 --> 00:10:47.150
Patrik Stas: which has been, which has been included in the original uh invitation, whether that be on the ledger, or like out of band

57
00:10:47.880 --> 00:10:49.030
Patrik Stas: uh.

58
00:10:49.460 --> 00:10:56.109
Patrik Stas: So there there. There is a test in a node. Js: which uh kind of shows how this can be used.

59
00:10:56.310 --> 00:10:57.620
Patrik Stas: Um,

60
00:10:58.500 --> 00:11:00.010
Patrik Stas: that purse.

61
00:11:03.430 --> 00:11:04.820
Patrik Stas: Um!

62
00:11:06.070 --> 00:11:10.090
Patrik Stas: Just a just a moment, a little uh technical.

63
00:11:12.500 --> 00:11:14.690
Patrik Stas: They can go stop uh

64
00:11:22.290 --> 00:11:31.000
George Mulhearn: the um, The V two doesn't refer to the Protocol version right? It's just saying this is the second version of this Api.

65
00:11:31.300 --> 00:11:41.320
Patrik Stas: Oh, yes, yes, that's correct. Uh is my My share is my screen being shared again. Oh, yeah, it is still shared. I just the video right there we go.

66
00:11:41.540 --> 00:11:48.700
Patrik Stas: Oh, yeah, yeah, it only refers to um like a new new new uh function uh.

67
00:11:48.720 --> 00:12:04.930
Patrik Stas: So arguments as function signature uh, I see we don't actually have is a really uh showed case in the wrapper. I see I thought we did. But uh it just the Api's edit,

68
00:12:06.020 --> 00:12:11.100
Patrik Stas: or maybe but at least it's clear to see what we've added. So yeah, we've we've

69
00:12:11.390 --> 00:12:20.890
Patrik Stas: we've created this uh this new uh way of processing connection requests that's typically receive connection requests on the institution side.

70
00:12:22.010 --> 00:12:31.940
Patrik Stas: Uh, And then we had added, uh unpack uh V. Six unpeg methods uh this is uh,

71
00:12:32.230 --> 00:12:34.390
Patrik Stas: uh, this is to

72
00:12:34.540 --> 00:13:02.399
Patrik Stas: you know, th. This is something all those included in there is, we see itself, but we propagated to it to the live Vcx. And in particular uh the node's viper uh, which enables simply just uh decrypt encrypt message and get us the you know it. It returns uh the crypted message and the parabolic key of the sender. So this is again useful on like the institutional side gives you a bit more

73
00:13:02.410 --> 00:13:20.270
Patrik Stas: uh control over uh processing incoming messages Uh: basically previously the kind of to go uh way of receiving connection requests as a public entity was to

74
00:13:20.360 --> 00:13:38.700
Patrik Stas: receive those uh requests on the visa agency a mediator. But now, with the additional apis we've added uh it. It enables uh implementation of of institution agent which can simply receive the messages directly

75
00:13:38.710 --> 00:13:43.029
Patrik Stas: uh, and as a encrypted message on some endpoints.

76
00:13:43.310 --> 00:13:51.709
Patrik Stas: Unpack them. Ak: They dec the the message, and i'll do something. Do something with it. I'll probably reply to that.

77
00:13:53.010 --> 00:14:08.240
Patrik Stas: Uh, Yeah. So this is this Pr. Uh Additionally, there was this uh one more improvement, one more like a new Api exposed on the lbcx. Again, nothing new on Aries Vcx side. Really

78
00:14:08.430 --> 00:14:13.590
Patrik Stas: uh, just uh added methods to uh read the

79
00:14:13.820 --> 00:14:19.629
Patrik Stas: value of a service attribute from the ledger um

80
00:14:20.450 --> 00:14:24.719
Patrik Stas: to the Nodejs Api. That's about it.

81
00:14:27.780 --> 00:14:31.850
Patrik Stas: Uh, yeah, coming back to the agenda.

82
00:14:33.090 --> 00:14:51.079
Patrik Stas: Uh yeah, There was not no other work uh since uh in the past week. But we have a bunch of stuff in progress. Uh, we are very close uh to uh finishing the F five removal. Uh there's a Pr. Open for it

83
00:14:51.210 --> 00:14:56.780
Patrik Stas: from Artem. I know he's battling right now with some failing tests.

84
00:14:57.120 --> 00:15:00.150
Patrik Stas: Uh: but uh,

85
00:15:00.500 --> 00:15:18.079
Patrik Stas: yeah, it's. It should be very close, and the pipeline is passing pretty much everything. It's load of uh modifications. Uh, but most of these are in the in the

86
00:15:18.210 --> 00:15:19.980
Patrik Stas: uh, in the

87
00:15:20.740 --> 00:15:23.810
Patrik Stas: uh. If we take a look at source.

88
00:15:28.260 --> 00:15:31.900
Patrik Stas: Oh, yeah, the the most of the modifications will be here

89
00:15:32.030 --> 00:15:39.210
Patrik Stas: uh, usually basically converting the fi calls into uh, just

90
00:15:39.840 --> 00:15:44.190
Patrik Stas: direct

91
00:15:44.300 --> 00:15:59.040
Patrik Stas: uh flip around the dependencies. So we are no longer using the ffi wrapper for Libindi, and instead just talking to that to Li live in this Vv. Our tools create uh directly

92
00:15:59.300 --> 00:16:12.329
Patrik Stas: uh, it seems like it's uh adding bit more lines. But uh, definitely, it makes uh, like the code more readable and more easily explorable, and uh, also differently faster.

93
00:16:12.520 --> 00:16:19.819
Patrik Stas: Uh, there's some notifications in other files, too, but it's mostly just a modified import. So

94
00:16:20.000 --> 00:16:26.659
Patrik Stas: hopefully it won't be too much conflicts uh see? Some? Yeah is also just

95
00:16:28.590 --> 00:16:32.210
Patrik Stas: uh some testing changes. Uh,

96
00:16:32.520 --> 00:16:46.850
Patrik Stas: so it comes in as a as a consequence uh optim has run into um some some issues with running tests. So I believe he uh changed uh

97
00:16:47.150 --> 00:16:49.590
Patrik Stas: uh the strategy.

98
00:16:50.140 --> 00:16:53.040
Patrik Stas: Just one one second. Um,

99
00:16:59.120 --> 00:17:03.350
Patrik Stas: yeah, I I believe he uh I had to do some uh

100
00:17:03.500 --> 00:17:10.380
Patrik Stas: changes in the related to testing. I don't know how uh

101
00:17:10.640 --> 00:17:13.959
Patrik Stas: extensive that he is, but it's Yeah, it's more of all.

102
00:17:14.190 --> 00:17:15.329
Patrik Stas: Um.

103
00:17:15.710 --> 00:17:31.589
Patrik Stas: So test infraction, test infrastructure changes. So whereas before we've created this initialization object. Uh: Now, instead, we are running the body of the test inside of a closure,

104
00:17:31.610 --> 00:17:33.170
Patrik Stas: and uh

105
00:17:33.210 --> 00:17:43.460
Patrik Stas: and uh, and and this and this uh testing object is kind of just wrapping it and making sure that all the resources get cleaned up afterwards.

106
00:17:44.250 --> 00:17:52.430
George Mulhearn: Uh, right previously, the clean up would happen uh on drop right?

107
00:17:52.590 --> 00:18:09.309
Patrik Stas: Yeah, yeah, exactly. But uh, that's also leading to some issues after the changes which actually has done I since I we don't have at him here. I can't speak of like precise technical reasons why why this is better. But, uh,

108
00:18:09.610 --> 00:18:14.290
Patrik Stas: uh, he iterated to this as a as a better solution. So

109
00:18:15.150 --> 00:18:16.440
Patrik Stas: um,

110
00:18:19.920 --> 00:18:22.810
Patrik Stas: let's see how this works. Um:

111
00:18:22.900 --> 00:18:36.020
Patrik Stas: No. Speaking of like basically this, Pr. And George yourself, with the changes you down like these are currently the most significant pieces of work, and like biggest pieces of work

112
00:18:36.030 --> 00:18:47.529
Patrik Stas: uh being done. So uh, yeah, I just maybe we can like hoping to your Pr. And also kind of in relation to this. Pr. Is just wonder, uh,

113
00:18:47.890 --> 00:18:59.169
Patrik Stas: uh, what's your progress? And uh And if you think you're gonna have, you know, conflicts with that. Perhaps the changes changes you are seeing here.

114
00:19:00.420 --> 00:19:01.470
George Mulhearn: Um,

115
00:19:01.580 --> 00:19:18.500
George Mulhearn: yeah, that this is definitely gonna be conflicts. Um. But uh, nothing. I can't work around um like I definitely in the past week or so. Um uh sort of got back onto this work um, and

116
00:19:18.620 --> 00:19:30.669
George Mulhearn: to fix up integration tests I've been modifying, like the setup wallet pool, and uh something else as well, modifying it slightly. Um, so that it works with

117
00:19:30.810 --> 00:19:36.300
George Mulhearn: uh Indie, or you know what modular dependencies. Um, but

118
00:19:36.810 --> 00:19:40.819
George Mulhearn: I think I think I understand what he's doing, and uh,

119
00:19:41.050 --> 00:19:42.380
George Mulhearn: I guess if

120
00:19:42.570 --> 00:19:45.719
George Mulhearn: his Pr. Goes in first, then I can.

121
00:19:46.190 --> 00:19:47.650
George Mulhearn: I can fix it up.

122
00:19:47.840 --> 00:19:55.660
Patrik Stas: Um, uh, could you? Could you? Uh open the Pr. And then, you know, we we will

123
00:19:56.000 --> 00:20:06.079
Patrik Stas: see better, uh, perhaps, which one makes more sense to merge first or uh, how, how, how extensive the the conflicts between them are.

124
00:20:06.430 --> 00:20:24.479
Patrik Stas: Yeah, yeah, sorry. I've been mean to get around to opening up the uh, but you know, even if it doesn't pass, and even if it's not complete uh it'll be still good to just to see like, where, where is W. To compare the both of streams of work.

125
00:20:25.040 --> 00:20:27.430
George Mulhearn: I got you all in to get that done soon.

126
00:20:27.660 --> 00:20:47.179
George Mulhearn: Um: yeah. But yeah, I guess I guess my project uh my progress is that I've been mostly just doing integration tests. Uh, I I believe they all passed. Now. Um, you know, running them locally. Um, it took me a bit of time to set up the local environment.

127
00:20:47.190 --> 00:21:01.759
George Mulhearn: Um, I ended up having to like deploy my own Vaughn network uh in my own like public virtual machine. Um, Did you manage to get it to work with the whole network?

128
00:21:01.920 --> 00:21:11.090
George Mulhearn: Yeah. So I had to add to put a on network into, you know, A. A. A. Vm. With a public ip, and then pointed at that. Uh,

129
00:21:11.360 --> 00:21:22.600
George Mulhearn: but yeah, just because I think to get it working on my laptop, i'd have to run the tests within the same docker environment as the on network, so that the network or sinks.

130
00:21:22.650 --> 00:21:42.040
Patrik Stas: Um. But yeah, I go to working, and you know, booted up the mediator as well, Luckily and uh, are you so? How how do you? Uh, Uh, Perhaps I can like advise in this area. Since we're talking about it, we have time on the call. So how do you currently like Um,

131
00:21:42.160 --> 00:21:48.630
Patrik Stas: what? What's your testing? Set up? You, you you you! You run the desk uh as dcx test from docker.

132
00:21:49.260 --> 00:22:04.209
George Mulhearn: Um no, no, i'm running them just from my machine, from my Mac machine. Um! But when you, when you start up uh create the test pool uh it, it looks for an environment variable for test full, Ip:

133
00:22:04.540 --> 00:22:15.600
George Mulhearn: So I've been pointing that at my own semi-public von network. Instance. Uh, but like I can't you like uh like um

134
00:22:16.480 --> 00:22:18.919
Patrik Stas: when you start the whole network, it's

135
00:22:19.780 --> 00:22:22.629
Patrik Stas: you you run the bullet working dog for, I suppose right?

136
00:22:22.660 --> 00:22:23.750
George Mulhearn: Yeah,

137
00:22:24.070 --> 00:22:29.479
Patrik Stas: so. And the docker is exposing some ports for the nodes right?

138
00:22:29.660 --> 00:22:30.600
George Mulhearn: Yep,

139
00:22:31.100 --> 00:22:32.930
Patrik Stas: and uh,

140
00:22:33.020 --> 00:22:52.039
Patrik Stas: oh, and and probably like in the Vaughnet, for, like full genesis file, there's some there that's the question. Basically like what is in the the genesis, What the pull a Genesis transactions look like

141
00:22:52.050 --> 00:23:05.570
Patrik Stas: in this one network. What kind of Url or Ip is pretend is, Is that something what's configurable that you, the network where you kind of want to on both kind of address, or url. You want to

142
00:23:05.840 --> 00:23:09.940
Patrik Stas: expose the network, or

143
00:23:10.130 --> 00:23:29.320
George Mulhearn: so, I guess, when I was doing it locally, when you boot up the bond network with the script, and it starts up all the docker containers. Um, you do type in. You know the ip that you want your nodes to use uh and be reachable on, and then that ip is what's in the genesis file.

144
00:23:29.380 --> 00:23:31.790
George Mulhearn: Um, and then

145
00:23:32.160 --> 00:23:43.079
George Mulhearn: you know your your local version of that genesis file has to exactly match. Um what the nodes understand as the genesis. Far otherwise you get um

146
00:23:43.420 --> 00:23:55.449
George Mulhearn: uh merkel tree errors, and it it doesn't validate. Um. So yeah, I was just running into issues trying to have that set as a local. Ip: um. And

147
00:23:56.310 --> 00:24:02.900
Patrik Stas: so what I was doing a lot when I was kind of running this kind of stuff uh,

148
00:24:03.180 --> 00:24:19.759
Patrik Stas: or usually like when I when I run what's the area with sex integration test? I run the in the pool like just with the you know local host, or one one to seven zero zero one, but uh another like trick I used to be using um

149
00:24:21.360 --> 00:24:28.120
Patrik Stas: is that I would basically set up. I would. I would, for example, run the network on

150
00:24:28.420 --> 00:24:32.550
Patrik Stas: some custom url name like, uh, I don't know uh

151
00:24:32.610 --> 00:24:44.329
Patrik Stas: in the network uh, and I would set this up in my slash, etc. Slash host as a kind of alias, you know, to override

152
00:24:50.400 --> 00:25:09.109
Patrik Stas: con content of the genesis file. And also my computer wouldn't try to go to the Internet to resolve in the and for it will take a look at the etc. Host, and and and there it will be pointed to one hundred and twenty-seven zero zero one. So in the end you know, my local computer would resolve

153
00:25:09.120 --> 00:25:13.190
Patrik Stas: that particular name. You know you are all name

154
00:25:13.240 --> 00:25:19.899
Patrik Stas: as a as a one hundred and twenty seven uh zero, zero, one pointing to the docker. Actually

155
00:25:20.930 --> 00:25:32.899
George Mulhearn: right? Okay, that that's really smart. Um. So your host machine you put in the etc. Slash host a mapping from some domain name to you know your local Ip

156
00:25:33.310 --> 00:25:35.010
George Mulhearn: with with the phone network?

157
00:25:35.100 --> 00:25:53.680
Patrik Stas: Yeah, Yeah, Exactly. So yeah, Just so. I I don't actually have it on like this is different. Computer i'm using right now. So I I don't have a bunch of stuff I cannot really like show show show it. But just to make sure that, like, uh, I'm, I'm coming clear.

158
00:25:53.690 --> 00:26:05.099
Patrik Stas: So I would have. They will be like as Dc. That's let's say, running on my local computer. Then I have. Then I would have like um

159
00:26:05.710 --> 00:26:06.880
Patrik Stas: the

160
00:26:07.590 --> 00:26:11.370
Patrik Stas: uh the container with

161
00:26:12.110 --> 00:26:17.659
Patrik Stas: uh in the pool pro like the kind of default container we just

162
00:26:17.750 --> 00:26:27.780
Patrik Stas: provide like with the instruction to be found on um in the Sdk repository, for example. But yeah, I would build that computer

163
00:26:28.000 --> 00:26:40.529
Patrik Stas: uh i'll build that uh that in the pool uh image uh saying that I want to run on in the let's say, in the network

164
00:26:40.710 --> 00:26:47.490
Patrik Stas: as a as a url, so this will become a part of the genesis file for all of the nodes.

165
00:26:47.810 --> 00:26:49.539
Patrik Stas: And then, yeah,

166
00:26:50.100 --> 00:26:53.949
Patrik Stas: on my local computer, I would say into the network

167
00:26:55.150 --> 00:26:57.609
Patrik Stas: where it's not working,

168
00:26:57.920 --> 00:27:01.560
Patrik Stas: I would say, into the network,

169
00:27:01.920 --> 00:27:03.330
Patrik Stas: and

170
00:27:04.030 --> 00:27:08.659
Patrik Stas: and this will be in a select et cetera

171
00:27:08.840 --> 00:27:10.170
Patrik Stas: and

172
00:27:10.780 --> 00:27:13.739
Patrik Stas: one hundred and twenty, seven, zero zero one.

173
00:27:14.130 --> 00:27:23.039
Patrik Stas: And yeah, this will be just simply uh. As for the docker configuration, i'll be running this all network host

174
00:27:23.120 --> 00:27:40.159
Patrik Stas: uh meaning that uh, basically all of these endpoints, all of the ports exposed by the the docker is usually something like nine, seven, zero, zero, two, nine, seven, zero, zero, four, three, something like that.

175
00:27:40.180 --> 00:27:58.340
Patrik Stas: Uh, with that configuration uh that'll be exposed those those services on local host, right? And then, if in my as V six test, or whatever kind of like agent in the application, I would say that Yeah, I I would basically just um

176
00:27:58.720 --> 00:28:08.130
Patrik Stas: uh copy that genesis file from the from the pool itself. It's the most reliable way to obtain genesis file.

177
00:28:08.220 --> 00:28:26.990
Patrik Stas: Uh, I will just copy it out of the container and make sure it's the same. And then you know the environment. It would try to like. Okay, then, as a result into the net, or oh, well, that is one hundred and twenty-seven, and it will just end up in the docker. So this is kind of how I

178
00:28:27.120 --> 00:28:29.419
Patrik Stas: uh had kids sometimes.

179
00:28:31.660 --> 00:28:37.259
George Mulhearn: Yeah, that that makes a lot of sense. Um, What were you running this on A on a Mac:

180
00:28:38.030 --> 00:28:41.839
Patrik Stas: Yeah, I'm running on. Mac: Yeah. Okay. Okay.

181
00:28:42.480 --> 00:28:43.540
George Mulhearn: Yeah.

182
00:28:43.580 --> 00:28:45.019
George Mulhearn: Because this

183
00:28:45.210 --> 00:28:46.460
George Mulhearn: okay, does Mac

184
00:28:46.490 --> 00:28:54.340
Patrik Stas: handle network Host: Well, Um or yeah, it it? Well, uh,

185
00:28:55.240 --> 00:28:59.099
Patrik Stas: I think there's a problem. The the only like trick

186
00:28:59.540 --> 00:29:06.459
Patrik Stas: within that, I think network host is something, I think, when you are in

187
00:29:06.540 --> 00:29:08.530
Patrik Stas: in one container

188
00:29:08.680 --> 00:29:17.270
Patrik Stas: and you try to go to local hosts. Let's say from here you try to reach local hosts

189
00:29:17.540 --> 00:29:36.200
Patrik Stas: nine, seven, zero, two, i'm not quite sure if the Mac works in such a way that it actually kinda gets out of the container and then goes back into it. Yeah, like if the local host means the host machine, or I feel like

190
00:29:36.240 --> 00:29:42.700
Patrik Stas: it actually just kind of loop itself like this, and it doesn't then doesn't make sense

191
00:29:42.790 --> 00:29:49.329
Patrik Stas: uh, and then yeah, they have lost something. Host Docker Internal. I I know I've been dealing with this

192
00:29:49.660 --> 00:30:10.459
Patrik Stas: uh special url in past. Yup, Yup, I think you run into this. Yeah, So I think I think in uh in Mac, the way you tell the docker that it should loop through your own like host, local host. Uh,

193
00:30:10.470 --> 00:30:12.990
Patrik Stas: if you actually, if you want to do

194
00:30:14.390 --> 00:30:16.029
Patrik Stas: did this sort of

195
00:30:19.150 --> 00:30:21.850
Patrik Stas: if you want to do this kind of look,

196
00:30:21.870 --> 00:30:32.439
Patrik Stas: I think you need to tell the doc her that you want to go to host her internal, and then it kind of works the way you you wanted it to work

197
00:30:39.460 --> 00:30:53.990
Patrik Stas: It's it's it's cool, because then even the notes. The notes themselves Don't really have problem to reach each other because they try to result in the dot network and

198
00:30:54.120 --> 00:31:12.439
Patrik Stas: well on the on the container itself. It sounds like, Well, we we don't know what the heck this is. We'll try to it's. It's gonna be resolved through the host machine, and I think the whole machine first always looks at the etc. Host. So then you end up um.

199
00:31:12.510 --> 00:31:17.909
Patrik Stas: You end up Going back to the other docker container. Would you

200
00:31:18.180 --> 00:31:20.069
Patrik Stas: try to reach

201
00:31:21.840 --> 00:31:26.270
Patrik Stas: right? Yes, the the the network host setting

202
00:31:26.330 --> 00:31:32.599
George Mulhearn: probably means that the nodes themselves will look in the host machines, etcetera,

203
00:31:32.670 --> 00:31:34.120
George Mulhearn: when they're resolving,

204
00:31:35.300 --> 00:31:41.350
Patrik Stas: Yeah, Yeah, basically that it goes through your host machine and then tries to like

205
00:31:41.770 --> 00:31:43.440
Patrik Stas: basically uh

206
00:31:43.780 --> 00:31:49.220
Patrik Stas: results into local hosts in context of your host machine. Yeah,

207
00:31:49.280 --> 00:31:52.179
Patrik Stas: yeah, yeah, that's cool. Thank you. I'll try that.

208
00:31:52.300 --> 00:32:08.119
Patrik Stas: Yeah, I tried the alias. I I think that should work pretty well. I I had a good experience with it, and it basically same end up working the same way in both on Linux and and me. So you don't need to have like special handling for both of them.

209
00:32:08.140 --> 00:32:09.050
George Mulhearn: Yeah,

210
00:32:10.120 --> 00:32:11.320
George Mulhearn: hello, sir.

211
00:32:11.780 --> 00:32:12.970
Patrik Stas: All right.

212
00:32:13.040 --> 00:32:14.330
Patrik Stas: Um.

213
00:32:17.470 --> 00:32:29.540
Patrik Stas: Is there anything I don't know anything else uh regard the the the you are doing, or any any challenges or any I don't know updates with you,

214
00:32:30.100 --> 00:32:37.840
George Mulhearn: maybe change. Or yeah, I I I did have a couple of questions, but um! Is there anything else in the agenda.

215
00:32:37.870 --> 00:32:52.399
Patrik Stas: Uh: well, yeah, maybe so. If if we finish the work in progress, kind of at at uh to the, to the not uh depth, but to the to to the wide Uh. I have

216
00:32:52.520 --> 00:32:57.710
Patrik Stas: I initiated some work uh on the migrating tests

217
00:32:57.780 --> 00:33:16.629
Patrik Stas: from Aries, Vcx. Well, in particular integration tasks from as Vcx into to migrate them on top of as V. Six agent layer, so it's A. It's just like very initiative initial phases.

218
00:33:16.640 --> 00:33:19.639
Patrik Stas: No conflicts to worry about. Um.

219
00:33:19.710 --> 00:33:28.979
Patrik Stas: I don't want this to like. Hold neither of you or add them in work. So this is just something i'll do like additionally on top of on top of that work.

220
00:33:29.350 --> 00:33:43.770
Patrik Stas: But yeah, basically I'm trying to, or I want to. It's really just one of work has been done. But um. The intention is to the take the test from over here. This is integration tests,

221
00:33:44.030 --> 00:33:55.330
Patrik Stas: uh, which they typically use. This kind of abstraction of favor, and at least representing two parties. And and

222
00:33:55.340 --> 00:34:13.009
Patrik Stas: basically it doesn't really makes like it Doesn't really make sense to have this kind of abstractions anymore, because we have now like generalized something very similar into the slash agents slash, or is v. Six agent

223
00:34:13.040 --> 00:34:15.060
Patrik Stas: uh into this project?

224
00:34:15.100 --> 00:34:35.330
Patrik Stas: So this is something like this: this this this right right here is basically like generalized uh, Ellison Faber. So yeah, I want to take this test away, and instead of using some custom, build favor, and Ellie's, which are part of A. Is V. Six testing module right now. Test utility.

225
00:34:35.340 --> 00:34:45.040
Patrik Stas: Uh: I would simply use this uh this as six agent abstraction uh, it's a source agent.

226
00:34:45.389 --> 00:34:47.640
Patrik Stas: Think agents direct.

227
00:34:48.010 --> 00:34:59.629
Patrik Stas: Now, this is like the new general Ellis and favor basically it's. It's a struct which uh uh keeps the list of connections and basically list of the

228
00:34:59.930 --> 00:35:06.419
Patrik Stas: the conversation, every's conversations going on. And then it can resolve that the

229
00:35:07.020 --> 00:35:15.149
Patrik Stas: the correct conversation based on a threat Id and update the State machine. The same thing like this: Alleys and paper. One

230
00:35:15.220 --> 00:35:33.460
Patrik Stas: uh structures implementations are doing So this is going to be the work. My strategy is uh like not change anything here like this. Can people living for a bit more? It just simply start migrating them. Maybe just a bunch of tests at first

231
00:35:33.690 --> 00:35:43.690
Patrik Stas: uh making like copies of these tests in the Um Aries v. Six agent uh Test Directory,

232
00:35:43.730 --> 00:36:02.490
Patrik Stas: and then, once, you know, once those ones will tests are basically duplicated in those both places. We can slowly start removing from here and just uh, just uh uh go with the fact that they are implemented elsewhere, and they are pretty much covering.

233
00:36:06.820 --> 00:36:12.529
Patrik Stas: Uh: yeah. So this is. This is always for the like work in progress uh

234
00:36:12.980 --> 00:36:16.779
Patrik Stas: the planned work. I think, like nothing.

235
00:36:17.670 --> 00:36:26.030
Patrik Stas: Well, there! Well, there, no, actually I'm wrong. Uh that I will. Uh, there is like upcoming work,

236
00:36:26.310 --> 00:36:35.280
Patrik Stas: and I think Well, first we actually started looking into something you mentioned, George, before uh

237
00:36:35.460 --> 00:36:52.050
Patrik Stas: so recently just yesterday. We're trying to update No. Js on our on like Nodej's version, for our Nodej is right for no just infrastructure there. Uh, from no just twelve, which has been deprecated six months ago.

238
00:36:52.100 --> 00:36:53.390
Patrik Stas: Uh

239
00:36:53.460 --> 00:36:59.509
Patrik Stas: to no just eighteen, and it's uh with some. We you updated bunch of packages,

240
00:36:59.560 --> 00:37:12.250
Patrik Stas: and it works. The problem is that it's like magnitude, or they're slower. So uh, of if a five call, which previously called, which took, which takes with no just twelve,

241
00:37:12.400 --> 00:37:30.300
Patrik Stas: twelve milliseconds. Now it takes two hundred and fifty milliseconds, or something like that, so it's like ten to twenty. X is slow down uh it's quite terrible. So we are now. Uh, we are now looking into like how to how to how to

242
00:37:30.310 --> 00:37:39.139
Patrik Stas: well maintain the no just capability, but also not lose all the performance. Uh, and as as uh

243
00:37:39.610 --> 00:37:41.609
Patrik Stas: as uh

244
00:37:41.790 --> 00:37:51.769
Patrik Stas: as a part of that, we also started considering to leverage the uh, the libraries you mentioned before, particularly. Uh,

245
00:37:53.070 --> 00:37:58.399
Patrik Stas: yeah, the node rs or unif sfi uh rs,

246
00:37:58.510 --> 00:38:09.010
Patrik Stas: as it to two packages we are considering. We also find something called coffee. Uh, that's purely on the Nodejs a level

247
00:38:09.090 --> 00:38:10.290
Patrik Stas: uh

248
00:38:11.350 --> 00:38:16.110
Patrik Stas: It's a library

249
00:38:16.420 --> 00:38:34.969
Patrik Stas: uh very fresh. So i'm a bit worried to uh Mike right to this. But actually uh, it looks kind of nice. It's It's uh, according to the benchmarks, it's much faster. But uh, either way I feel like It's gonna be quite a bit of a Rev. Right?

250
00:38:34.980 --> 00:38:43.749
Patrik Stas: Quite significant changes for the No jazz. So i'm wondering maybe just it. It just makes sense to kind of, instead of

251
00:38:43.960 --> 00:38:53.059
Patrik Stas: investing into new fi tool in Nodejs. Maybe we can just invest our time to that if better ffi

252
00:38:53.100 --> 00:39:00.910
Patrik Stas: on the Ross layer, and therefore get like uh the fis, for you know Js. Or other languages.

253
00:39:01.000 --> 00:39:03.670
Patrik Stas: Um, as a

254
00:39:03.760 --> 00:39:07.110
Patrik Stas: as well, it's it's coming with it.

255
00:39:08.270 --> 00:39:24.899
George Mulhearn: Yeah, let me consider? Not. Yeah, Yeah, it You unify ours. It unfortunately doesn't have, you know, node uh rapper Ffi: um stuff. It's just so. Yeah, you need something else.

256
00:39:25.280 --> 00:39:33.719
Patrik Stas: Oh, so we do need if I I still um still have to deal with the fi. My solving. Oh, genius, right? It Doesn't:

257
00:39:34.340 --> 00:39:36.529
Patrik Stas: it is. Yeah,

258
00:39:36.610 --> 00:39:52.900
George Mulhearn: yeah, Colin and Swift at the moment. I'm not sure if that's planning on doing node as well. Um, But yeah, it's pretty. It's pretty good unify um, because you know, you can pass entire structs across the Ffi layer, and you know, keep everything typed.

259
00:39:52.930 --> 00:39:56.720
George Mulhearn: Um. But you know that's a pretty drastic change.

260
00:39:56.870 --> 00:40:00.880
Patrik Stas: Mhm. Yeah, I I I would probably

261
00:40:01.180 --> 00:40:06.170
Patrik Stas: that they would be definitely interesting to uh kind of explore,

262
00:40:06.200 --> 00:40:16.590
Patrik Stas: at least to try some small example right now. I don't really have much go about like both of these. Uh, but my understanding is that we know the Rs.

263
00:40:16.870 --> 00:40:23.510
Patrik Stas: It can actually generate like something else consumable from from O. Js: kind of straight away.

264
00:40:24.040 --> 00:40:29.919
Patrik Stas: Uh: Yeah. So this is kind of what we are looking into. Possibly so possibly we would be

265
00:40:30.630 --> 00:40:31.910
Patrik Stas: uh

266
00:40:33.110 --> 00:40:39.110
Patrik Stas: do rewriting the node Js like uh rapper in a coming future,

267
00:40:39.180 --> 00:40:49.969
Patrik Stas: but uh, probably still trying to keep the Apis intact without much modifications. Just flip around the internals around the Fi.

268
00:40:50.790 --> 00:40:56.909
Patrik Stas: Uh And yeah, actually, maybe one more point as to the upcoming work.

269
00:40:57.080 --> 00:40:58.350
Patrik Stas: Um,

270
00:40:58.400 --> 00:41:03.819
Patrik Stas: I think what we need to look into uh, quite importantly.

271
00:41:04.310 --> 00:41:05.620
Patrik Stas: Um,

272
00:41:06.180 --> 00:41:08.190
Patrik Stas: Well, we got a

273
00:41:08.400 --> 00:41:21.869
Patrik Stas: We got a Pr. Open from Paul just yesterday. Uh, this is adding support for messages uh which contain like, did so for a fixed dids

274
00:41:21.980 --> 00:41:32.150
Patrik Stas: uh It's very tiny. Pr: uh, surprisingly just few lines of code added. So we'll have to look at this. I think maybe we need to add some tests. Um,

275
00:41:33.150 --> 00:41:35.310
Patrik Stas: uh, but yeah,

276
00:41:35.480 --> 00:41:47.859
Patrik Stas: so we'll we'll go through this and review it. But uh, so, but this simply, this is something like a step forward. So it's uh better interop. But uh, what I was uh trying to get into is

277
00:41:48.190 --> 00:41:49.669
Patrik Stas: uh

278
00:41:50.040 --> 00:41:56.560
Patrik Stas: is to implement uh, basically what's kind of fleshed out in this issue right here.

279
00:41:56.930 --> 00:41:58.399
Patrik Stas: Uh.

280
00:41:58.450 --> 00:42:02.039
Patrik Stas: So I've written down like a

281
00:42:02.200 --> 00:42:21.999
Patrik Stas: a few stages how we could uh improve, interrupt with ours. Vcx. And basically like, we can think of it in like uh from two perspective. One is the perspective of the like Ares Vcx based mobile client. We just trying to interrupt with, uh,

282
00:42:22.140 --> 00:42:31.020
Patrik Stas: usually some other institutions. Oftentimes those will be occupies, I suppose. Um. And so

283
00:42:31.560 --> 00:42:32.770
Patrik Stas: to

284
00:42:33.210 --> 00:42:41.740
Patrik Stas: to enable this particle interrupt, we, the first kind of stage would be just

285
00:42:42.880 --> 00:42:55.300
Patrik Stas: assume that the the service attributes on the ledger are in the following form: uh simply adhering to that did so. Um specification.

286
00:42:55.390 --> 00:43:00.650
Patrik Stas: And this should be like pretty like smooth to to

287
00:43:00.820 --> 00:43:02.640
Patrik Stas: uh consume.

288
00:43:02.660 --> 00:43:09.800
Patrik Stas: Uh. And then, if that fails just for the sake of interoperability, we like, you know, current state

289
00:43:09.810 --> 00:43:30.119
Patrik Stas: of the code uh which, which, on the institutional side currently would ride this sort of stuff on the ledger. So, as a fall back, you fail to resolve this, Then we will try to assume. Okay, Probably it's in the legacy format, and we'll fall back into that. But I suppose it most of the like people,

290
00:43:30.130 --> 00:43:36.379
Patrik Stas: it would always uh enter the branch of code, we just consuming the proper format.

291
00:43:36.560 --> 00:43:42.319
Patrik Stas: And then in the next stages uh, we would.

292
00:43:45.820 --> 00:43:49.710
Patrik Stas: Yeah, uh, we would kind of improve the

293
00:43:50.210 --> 00:43:58.350
Patrik Stas: Oh, i'm running out of battery because I don't think it's gonna last for twenty minutes more. So just a second i'm right back. Okay,

294
00:44:12.170 --> 00:44:14.309
Patrik Stas: the underestimated

295
00:44:14.920 --> 00:44:16.060
Patrik Stas: uh,

296
00:44:16.260 --> 00:44:19.729
Patrik Stas: maybe overestimated my battery, I suppose.

297
00:44:20.470 --> 00:44:21.759
Patrik Stas: Alright,

298
00:44:21.790 --> 00:44:23.020
Patrik Stas: there we go.

299
00:44:23.950 --> 00:44:31.289
Patrik Stas: Yeah. So then, in the next stage uh this would be more of the the interoperability. Uh, where

300
00:44:31.580 --> 00:44:34.619
Patrik Stas: there's like in the role of the institution,

301
00:44:34.730 --> 00:44:39.760
Patrik Stas: there's A Aries Vcx based institution. And in the role of

302
00:44:40.010 --> 00:44:52.050
Patrik Stas: client device there's some different mobile framework, for example, A. Ofj. So the A. Of obviously cannot currently read our legacy format. So

303
00:44:52.260 --> 00:45:06.399
Patrik Stas: we need to make uh like steps uh towards uh writing the correct format on the ledger. So I was thinking in the first kind of step. One point five uh we would

304
00:45:06.410 --> 00:45:16.559
Patrik Stas: uh simply fix the formatting as the as a simple change. So, instead of having service here with the right endpoint, and the

305
00:45:16.830 --> 00:45:27.989
Patrik Stas: service endpoint becomes endpoint uh. But the problem with this format still is that the did solve a method uh doesn't

306
00:45:28.080 --> 00:45:38.449
Patrik Stas: assume that, uh people going to write their own recipient keys, and it simply assumes that the recipient key is the very key of the did

307
00:45:38.590 --> 00:45:45.480
Patrik Stas: um. So then in the the stage two we would simply remove the rest Pinkies

308
00:45:45.560 --> 00:46:00.650
Patrik Stas: uh we'll stop writing that. And uh, basically we would end up with this kind of structure, which is exactly uh, you know what the what the mobile do, I will. The A is V. Six Uh. Clients

309
00:46:00.930 --> 00:46:05.410
Patrik Stas: are properly expecting as a format

310
00:46:05.890 --> 00:46:25.769
Patrik Stas: to be found on the ledger. But yeah, the the the basically the I think for for um people using mobile clients. This stage one is the most important one, and it's also easiest to be the easiest to implement. So it's kind of we in there.

311
00:46:25.780 --> 00:46:30.479
George Mulhearn: Uh: So I think, Yeah, this is like, uh, I'll. I'll add it to the

312
00:46:31.160 --> 00:46:35.589
Patrik Stas: so. This list as a bit of inter of work.

313
00:46:36.420 --> 00:46:40.010
Patrik Stas: Uh, this is something I want to look into

314
00:46:40.220 --> 00:46:44.970
Patrik Stas: in the coming time, and I think there will something else

315
00:46:47.230 --> 00:46:48.529
I was there.

316
00:46:53.220 --> 00:46:55.960
Patrik Stas: Oh, maybe not. Uh,

317
00:46:56.400 --> 00:47:01.309
Patrik Stas: uh, yeah, I think the interrupt and the Fi:

318
00:47:01.380 --> 00:47:12.850
Patrik Stas: And yeah, we already have a bunch of stuff in progress right now. So we'll have to get those get those things merge first. I think we have plenty of time to think about what should be the next

319
00:47:12.930 --> 00:47:14.669
Patrik Stas: Yeah, sort of steps

320
00:47:16.450 --> 00:47:27.760
Patrik Stas: Uh: yeah. So now I mean we. We went through all the points, but I think we still had some when we were discussing the your piece of work. I think they will still

321
00:47:27.980 --> 00:47:33.569
Patrik Stas: something uh you had to to mention right? Um,

322
00:47:33.990 --> 00:47:44.240
George Mulhearn: I guess. Uh, before that another question I had is with the Vdr tools if I removal. Um. Does that mean we don't have to have

323
00:47:44.280 --> 00:48:02.630
Patrik Stas: uh, you know, Indie or via tools built directly to? Oh, yeah, exactly that. That's one of the sweet benefits. Well, actually, actually, that's the case even today. Uh, even on the May, it wasn't maybe a month or two ago uh you had to like

324
00:48:03.260 --> 00:48:08.500
Patrik Stas: you had to check out the Vdr tools, repo, build it, and build the

325
00:48:08.560 --> 00:48:20.020
Patrik Stas: a so like or dilemma library. Put it on somewhere on slice users, slash local leap path, and then they would finally can actually use the Vcx. But

326
00:48:20.130 --> 00:48:21.620
Patrik Stas: um,

327
00:48:21.970 --> 00:48:35.289
Patrik Stas: but uh, yeah, for like as a thing stands today, you just check out the repo, and you don't have to. You don't need to know that uh live in the exist at all, and the Vdr tools

328
00:48:35.350 --> 00:48:47.420
Patrik Stas: uh it, just around cargo built or cargo on, you know. Cargo test, and it just works. It's a over out kind of automatically builds the Vdr tools and everything around there.

329
00:48:47.570 --> 00:48:48.669
Patrik Stas: Uh.

330
00:48:48.810 --> 00:48:56.949
Patrik Stas: So it's already like that. But it was a recent recent improvement.

331
00:48:58.420 --> 00:49:10.269
George Mulhearn: Yeah, I think I started my work when you did have to have it installed. Um. And yeah, we based everything since. Yeah, I didn't even notice the change. So it's working smoothly.

332
00:49:10.290 --> 00:49:16.400
Patrik Stas: Yeah, that that was those uh worry contribution from our team uh

333
00:49:17.040 --> 00:49:18.399
Patrik Stas: just a second

334
00:49:24.000 --> 00:49:25.390
uh drink as well. One:

335
00:49:29.020 --> 00:49:31.020
Patrik Stas: Okay, perfect.

336
00:49:31.930 --> 00:49:33.109
Patrik Stas: Okay,

337
00:49:33.610 --> 00:49:49.249
Patrik Stas: Um: yeah, yeah. There was a contribution from Artem. It was basically he um starts cleaning up on, like all the kind of build infrastructure and linking, you know, static dynamic linking.

338
00:49:49.380 --> 00:49:50.779
Patrik Stas: Uh

339
00:49:52.020 --> 00:50:04.899
Patrik Stas: and uh, yeah, this was one of the effects that, like the basically, the pro build process, become much simpler as you didn't have to deal with the Vdr tools anymore, and also

340
00:50:04.910 --> 00:50:18.110
Patrik Stas: the amazing side effect of that, although maybe, since you are using like different approach for the mobile uh, George, maybe not like super like relevant for you. But the size of the

341
00:50:18.120 --> 00:50:26.379
Patrik Stas: size of the artifacts, for Android was decreased by then like ten times. So from one hundred and fifty Max to

342
00:50:26.470 --> 00:50:32.989
Patrik Stas: uh fifteen or twenty, something like that that was really nice.

343
00:50:34.190 --> 00:50:36.360
George Mulhearn: Wow, Yeah, that's that's awesome.

344
00:50:37.400 --> 00:50:38.640
Patrik Stas: Um,

345
00:50:39.220 --> 00:50:44.289
George Mulhearn: uh. So I did have another question. We have time.

346
00:50:46.020 --> 00:50:48.559
George Mulhearn: Yeah, um. So

347
00:50:49.320 --> 00:51:09.039
George Mulhearn: working on the integration tests. Um, and you know, with my changes, there's kind of two modes that you can run Vcx in there's with all the Indie dependencies. Um, or with you know the modular dependencies, so via ndv. And credit, et cetera. Um, So

348
00:51:09.060 --> 00:51:13.250
George Mulhearn: I've been trying to think about a clean way to,

349
00:51:13.400 --> 00:51:17.960
George Mulhearn: you know, test both in the integration test, and

350
00:51:18.360 --> 00:51:21.990
George Mulhearn: i'm not sure of the best approach to do that with the beta,

351
00:51:22.040 --> 00:51:24.810
George Mulhearn: you know. Move the test into a function, and then

352
00:51:24.840 --> 00:51:28.439
Patrik Stas: call it twice with the different modes

353
00:51:28.700 --> 00:51:35.589
George Mulhearn: at the moment I have it set up so that you know when you build Alice um it, it checks

354
00:51:35.600 --> 00:51:52.270
George Mulhearn: for a feature flag, and then, you know, if it has a certain feature flag, then it'll run it in the special mode, otherwise it will use Indie Um. But that's just my own local testing. Um, I assume that you'd want to be testing both modes in the integration test.

355
00:51:52.900 --> 00:52:00.430
Patrik Stas: Yeah, So we probably that's what we would want, because we still want to support

356
00:52:00.830 --> 00:52:04.629
Patrik Stas: in the Uh. Vv. Our tools for for a while.

357
00:52:04.700 --> 00:52:13.909
Patrik Stas: Uh and no, We still like people like you, and like anybody who's freshly starting with the

358
00:52:13.960 --> 00:52:17.110
Patrik Stas: I think the the the

359
00:52:17.360 --> 00:52:32.099
Patrik Stas: the in the new approach would be like the first choice for anyone who who can to who has the luxury of choosing. Uh, but if for the legacy reasons, we want to still support the old approach as well, uh

360
00:52:32.420 --> 00:52:44.510
Patrik Stas: and uh I, for for the like specific technical approach. How to run both Um, I don't really know, like what's the good way? I think, if you,

361
00:52:44.650 --> 00:52:49.569
Patrik Stas: if you simply found some way how to, you know, enable testing both

362
00:52:50.000 --> 00:53:06.799
Patrik Stas: uh and it works, and it's run both place. I think that's fine, and if there's like, possibly A. But if there possibly exist a better approach to do it, and it can be improved anytime. But whoever is bucked enough to commit to improving it.

363
00:53:06.810 --> 00:53:20.970
Patrik Stas: So yeah, as as far as it works, as far as we are testing both, I think, like technicalities of how particular we gonna do it. It doesn't really matter that much in like the first iteration can be improved in any time.

364
00:53:20.980 --> 00:53:35.089
George Mulhearn: Okay, Yeah. Because at the moment, yeah, that feature flag which you know, just means when you type cargo test, you add in that extra flag to use like the the custom profile. Um, I guess if I kept it that way. Then,

365
00:53:35.240 --> 00:53:45.169
George Mulhearn: uh the Ci could be updated to run cargo test twice with the different features. Um, or I could change the test to, you know, just

366
00:53:45.240 --> 00:53:47.170
George Mulhearn: by default. Run both.

367
00:53:47.290 --> 00:53:58.369
Patrik Stas: Um: yeah, Whatever works, I mean, we can like we can have um just. We can just add more jobs to Ci, and this is open so as an open source project.

368
00:53:58.450 --> 00:54:08.139
Patrik Stas: Uh, you know the Github actions are for free, so we don't We don't need to worry too much about the C. I time. So it's It's nine.

369
00:54:10.100 --> 00:54:12.000
George Mulhearn: Okay, Great um

370
00:54:12.020 --> 00:54:22.030
George Mulhearn: cool. Um. The other thing I was wondering about. Do you know if uh with the recent changes. You know the switch to Vdr tools, Rs

371
00:54:22.080 --> 00:54:28.949
George Mulhearn: and all of that stuff. Do you know, if there was any changes to how uh panics uh

372
00:54:29.110 --> 00:54:43.450
George Mulhearn: handled like a panic hook or some type of suppression, just because i'm finding now, uh, after those changes when I run tests, and I have a panic uh it. It won't, you know. Show me the stack trace for that panic,

373
00:54:43.530 --> 00:54:44.620
George Mulhearn: is it?

374
00:54:51.160 --> 00:54:52.649
Patrik Stas: Um,

375
00:54:55.830 --> 00:54:59.809
Patrik Stas: you? You are running some tests on on this on this branch?

376
00:55:01.060 --> 00:55:13.240
George Mulhearn: Uh, yeah, you know, running cargo test against an integration test? Um, with no capture and everything. Um, if if I have a panic somewhere in the code um

377
00:55:13.380 --> 00:55:14.589
George Mulhearn: it one,

378
00:55:15.160 --> 00:55:23.140
George Mulhearn: you know. Print out the back. Trace it It it's a small thing, but it's just a little. It was a little annoying.

379
00:55:25.420 --> 00:55:44.970
Patrik Stas: Well, I know that out of them was saying that we should remove um failure create because it's uh actually It's actually archived uh and uh like, not actively maintained anymore. So there's like new alternatives in the around ecosystem. Now,

380
00:55:46.960 --> 00:55:48.259
Patrik Stas: right,

381
00:55:54.750 --> 00:56:02.080
Patrik Stas: remove the failure from it as a question is, what kind of

382
00:56:02.310 --> 00:56:06.720
Patrik Stas: if he perhaps did some, or he updated the version.

383
00:56:07.340 --> 00:56:11.259
Patrik Stas: I I can't honestly actually answer this question. I don't know.

384
00:56:11.920 --> 00:56:19.169
George Mulhearn: So good. Yeah, like I I I found a a work around to, you know. Have this sort of macro thing which

385
00:56:19.380 --> 00:56:36.330
George Mulhearn: captures the panic and prints it for me just while i'm testing. Um. But yeah, it was just a little hiccup I ran into. Well, maybe I can. You can. You can describe the issue in the the thing about the stack trace on the discord, and i'll uh,

386
00:56:36.340 --> 00:56:54.730
Patrik Stas: i'll. I'll get out of him there, and I he he can, you know, get some feedback for a big explain like what has changed in this regard. Something cool. Yeah, um. I kind of kind of got it down to like uh the minimum. I needed to reproduce it. And

387
00:56:55.040 --> 00:56:56.250
George Mulhearn: basically

388
00:56:56.330 --> 00:57:14.489
George Mulhearn: I was just calling unwrap on a on a none just to produce the panic. And it was really weird. If I call the unwrap immediately in my little test function. It It shows me the back choice, which is good, but if I pull it one line after I open a an Indie wallet

389
00:57:14.720 --> 00:57:20.320
George Mulhearn: there's no back. Trace. It just says that. So it's really weird. Um: But

390
00:57:20.390 --> 00:57:23.890
George Mulhearn: yeah,

391
00:57:24.080 --> 00:57:31.450
Patrik Stas: yeah, I mean the stack trace is definitely desirable.

392
00:57:31.920 --> 00:57:38.200
Patrik Stas: Um, Now let's see what that has to say about it.

393
00:57:38.980 --> 00:57:44.079
Patrik Stas: I think it's not on discord, but i'll get him there so I can discuss it.

394
00:57:46.800 --> 00:57:48.980
George Mulhearn: Um! And uh

395
00:57:49.230 --> 00:57:54.589
George Mulhearn: Steven Steven Karen as well posted about a non-credit irs.

396
00:57:54.690 --> 00:58:07.439
George Mulhearn: Um, So I I I might try migrate to that as well he he was saying that it's basically the exact same as credits. Um, but it's a dependency change. Uh

397
00:58:07.630 --> 00:58:25.470
Patrik Stas: they'll they'll be again amazing. Well, maybe you can be like in a two steps, but if if it's small change, and you can do it. Uh, sure, I don't have any uh nothing against doing so just uh in in, in one, in in that pr your

398
00:58:25.610 --> 00:58:27.020
Patrik Stas: uh planning

399
00:58:27.560 --> 00:58:29.209
George Mulhearn: cool cool.

400
00:58:29.990 --> 00:58:41.830
Patrik Stas: I i'm a i'm a like a big fan of like small it's like it's fine to merge things which are not perfect; and and uh,

401
00:58:42.410 --> 00:58:55.479
Patrik Stas: as far as the the changes provide value, it's always reasonable to merge it, and then, even if it's not the most beautiful, call it can always be improved even like next step, some refactoring, right? So

402
00:58:56.210 --> 00:59:02.719
George Mulhearn: yeah, yeah, especially with, you know, so many changes happening so quickly. It's good to get it in.

403
00:59:03.450 --> 00:59:10.179
Patrik Stas: Yeah, yeah, I was in kind of a big, big big big. So right now, on the way it is hard to make them

404
00:59:10.340 --> 00:59:22.219
Patrik Stas: sometimes are just difficult to split out into something smaller. I can see the as far removal and your work. These are exact prime examples of that

405
00:59:23.980 --> 00:59:27.530
George Mulhearn: cool. Yeah, Yeah, I need to get that.

406
00:59:28.310 --> 00:59:29.779
George Mulhearn: That's my next call.

407
00:59:30.660 --> 00:59:36.669
Patrik Stas: Uh, I'll put it here. So uh the discussion of of opening

408
00:59:36.930 --> 00:59:39.410
Patrik Stas: uh

409
00:59:39.780 --> 00:59:48.950
Patrik Stas: George, and so you can to conclude the stuff we discussed. Oh, yeah, we were also talking about

410
00:59:49.150 --> 00:59:54.529
Patrik Stas: about um setting up the ledger. So running of on

411
00:59:54.780 --> 00:59:56.330
Patrik Stas: network.

412
01:00:00.100 --> 01:00:06.540
Patrik Stas: Uh yeah, Then you're asking about building V six. So basically no longer to

413
01:00:06.700 --> 01:00:12.069
Patrik Stas: explicitly three builds Vv: our tools anymore.

414
01:00:12.930 --> 01:00:18.599
Patrik Stas: And then the we were briefly talking about the testing approach.

415
01:00:18.940 --> 01:00:21.069
Patrik Stas: And yeah, I guess

416
01:00:21.170 --> 01:00:32.120
Patrik Stas: I guess it's it. We have like one minute, but I think we can stretch it out uh the longer. Is there anything anything else on your mind.

417
01:00:32.200 --> 01:00:34.550
George Mulhearn: Um, yeah, I guess

418
01:00:34.710 --> 01:00:42.520
George Mulhearn: One more or more comment I had was um uh spinning up the mediator locally. Um,

419
01:00:43.330 --> 01:00:48.900
George Mulhearn: i'm not. I'm not too sure if the the Docs were exactly up to date. Um,

420
01:00:49.250 --> 01:00:52.240
George Mulhearn: I did. I did struggle a little bit. Um,

421
01:00:53.370 --> 01:00:58.000
George Mulhearn: Maybe Maybe the setup was more obvious to other people, but

422
01:00:58.010 --> 01:01:22.049
Patrik Stas: you know, knowing to spin it up and then run migration scripts to set up. Uh, yeah, Okay, all. So how how far did you get, but I mean it's a good point. Probably it it should be. It should be if it was difficult for you. I'm sure it's also difficult for other people. So it's something to improve. But still, how how far did you manage to get through with that?

423
01:01:22.060 --> 01:01:41.709
George Mulhearn: Maybe either I I have it. I have it running locally. Um. Oh, you have it. Yeah, it's all working. Um. But yeah, you know, I have to do a lot of debugging uh, you know certain tables don't exist. Um. But yeah, I guess I'm: i'm not much of a a database guy. So

424
01:01:41.720 --> 01:01:50.150
George Mulhearn: yeah, there is also this like, not really well documented feature, which is but, however, very useful

425
01:01:50.160 --> 01:02:02.370
Patrik Stas: uh about uh notifications. So when you're running uh, you know your if you are a mobile device, and you are using uh this exaggeration for mediation,

426
01:02:03.040 --> 01:02:08.309
Patrik Stas: then, like you need some way to find out that you have received a message

427
01:02:08.790 --> 01:02:25.590
Patrik Stas: one on like the simplest implementation, but not desirable, is to just do polling like you Check your messages every once in a while, but that's not really good approach. So instead, uh, there's implemented uh like long polling mechanism

428
01:02:25.660 --> 01:02:28.749
Patrik Stas: uh be on top of like readies

429
01:02:28.810 --> 01:02:34.479
Patrik Stas: uh. So you can call this one. I'll just open it right now.

430
01:02:38.330 --> 01:02:57.540
Patrik Stas: Uh and yeah, it's something we should also looking on better. It's kind of a hidden with. But i'll just open up the endpoint. So maybe in the meantime we just kind of can look. Look at it or try it out. It's actually like very simple endpoint uh slash api slash

431
01:02:57.550 --> 01:02:58.850
Patrik Stas: messaging

432
01:02:59.720 --> 01:03:01.560
Patrik Stas: no slash

433
01:03:02.010 --> 01:03:03.850
Patrik Stas: agency, I think

434
01:03:05.250 --> 01:03:20.229
Patrik Stas: uh, we still have like this. So there was a old version slash, experimental, and then we have a a new version. And that point is that if you know the the id of your agent, you can call this endpoint,

435
01:03:20.240 --> 01:03:36.810
Patrik Stas: and it will simply hang for thirty seconds, and after thirty seconds it's a you know, returns response, or it might return earlier than within thirty seconds. If you happen to uh receive a message,

436
01:03:36.860 --> 01:03:49.159
Patrik Stas: you know, while you are waiting for the phone. So you just open the you know Http call, and if you receive a message that endpoint returns uh with following payload

437
01:03:49.170 --> 01:04:08.920
Patrik Stas: uh it's gonna have an act timestamp and the body, and then what you have to do If you try. If you then try to call this endpoint again, it will return the same response, like immediately, just on the basis that you have received the message with some timestamp,

438
01:04:08.930 --> 01:04:24.179
Patrik Stas: you know, at some in some point of time. All this point of time, and you didn't like it since this time stand. So what you have to do is call this second endpoint where you basically are saying like, Okay, Um. I acknowledged that there has been a message

439
01:04:24.190 --> 01:04:38.879
Patrik Stas: Uh, there has been some one or more messages which have a right before this time, and you know, if there, if you call this endpoint with, let's say downstream

440
01:04:39.490 --> 01:04:49.959
Patrik Stas: for illustration of value five like, Okay, that means you have act all the messages which have time to, you know, five or less.

441
01:04:50.040 --> 01:04:51.270
Patrik Stas: But,

442
01:04:51.570 --> 01:04:55.639
Patrik Stas: uh, you know, currently the current time.

443
01:04:56.010 --> 01:05:01.049
Patrik Stas: Maybe the current time right now is ten. You are acting five.

444
01:05:01.440 --> 01:05:04.099
Patrik Stas: And yeah, maybe you act some messages.

445
01:05:13.130 --> 01:05:17.580
Patrik Stas: But, however, if there has been messages,

446
01:05:17.840 --> 01:05:29.360
Patrik Stas: you know, between five and ten, even though you add the five, you call this endpoint, you'll just get the new timestamp. You have to act again, sure that your device is notified as soon as possible about that

447
01:05:29.640 --> 01:05:43.099
Patrik Stas: fact that there's a messages, and uh, maybe to get like, also glimpse of uh, how this works even better. There's integration tests implemented So source uh no, it's going to be in test

448
01:05:43.920 --> 01:05:47.750
Patrik Stas: uh, not units.

449
01:05:47.790 --> 01:05:51.669
George Mulhearn: So do you have to be running the reddest um container for this?

450
01:05:52.100 --> 01:06:10.550
Patrik Stas: Oh, yes, you need to run the and you need to in the config um in the agency. Config uh, you can look at this local Ca: Uh: It stands for like client agency, you know for the in the role of agency for like mobile devices.

451
01:06:10.560 --> 01:06:29.100
Patrik Stas: And yeah, here we are set. You first have to say that agency type is client. It's like for mobile devices. And if that so, if you set up this value, then uh this, this, this url, and you ready. Zero notifications become uh, I think the required

452
01:06:29.290 --> 01:06:31.819
Patrik Stas: uh it just forces you to set it up.

453
01:06:32.040 --> 01:06:41.369
Patrik Stas: So I think this one is the legacy one, and we can soon remove this. And this is the the new. This is for the new Api.

454
01:06:41.870 --> 01:06:49.139
Patrik Stas: Uh. If you take a look at the code, I i'm sure you'll kind of figure out which variable in to set up. But

455
01:06:49.320 --> 01:06:50.459
Patrik Stas: um!

456
01:06:50.490 --> 01:07:01.829
Patrik Stas: It's just those two. It's just you need to provide a uh ready's url. But what I wanted to also show you is the test, and i'm sure where to go.

457
01:07:07.510 --> 01:07:09.819
Patrik Stas: And then we have,

458
01:07:13.040 --> 01:07:15.730
Patrik Stas: uh, I suppose,

459
01:07:16.110 --> 01:07:19.110
Patrik Stas: long for V two

460
01:07:20.770 --> 01:07:23.950
Patrik Stas: and yeah, here's a bunch of tasks,

461
01:07:24.140 --> 01:07:28.640
Patrik Stas: a few tasks which are demonstrating the features. So

462
01:07:28.750 --> 01:07:30.660
Patrik Stas: basically,

463
01:07:31.990 --> 01:07:34.199
Patrik Stas: do we start a long poll

464
01:07:34.440 --> 01:07:40.639
Patrik Stas: here? Then we sleep for a bit. And yeah, and this is like, you know we are not.

465
01:07:41.740 --> 01:07:53.990
Patrik Stas: This is a synchronous function, but we are not waiting here for it in this test, so we just keep on going asynchronously. We are sleeping or a bit, and then and then

466
01:07:54.660 --> 01:08:04.820
Patrik Stas: uh, yeah, we we like manually like here, You know, we kind of simulated that the new message has arrived on some agent at some time.

467
01:08:04.880 --> 01:08:07.019
Patrik Stas: Uh, we sleep some more.

468
01:08:07.360 --> 01:08:08.870
Patrik Stas: Uh

469
01:08:09.010 --> 01:08:28.999
Patrik Stas: uh, yes, and yeah. And this point you we take responses which is here is some uh shared. We just yeah, The responses was injected into the resolution of these promise. Right? So whenever this resolves uh uh,

470
01:08:33.760 --> 01:08:37.629
Patrik Stas: yeah, here after we flag the new message.

471
01:08:37.670 --> 01:08:42.700
Patrik Stas: Uh, it just appears to be, you know, in the responses right away.

472
01:08:43.010 --> 01:08:44.170
Patrik Stas: Uh

473
01:08:46.950 --> 01:08:51.630
Patrik Stas: yeah, and it doesn't change at the end, and there's few more things like

474
01:08:51.890 --> 01:08:55.049
Patrik Stas: simulating similar scenarios

475
01:08:55.560 --> 01:09:05.960
Patrik Stas: right here. So maybe this is even better test, because at first we start this long pole. We check that there is no responses yet. But

476
01:09:06.899 --> 01:09:09.889
Patrik Stas: uh, okay, this is working with the dime out

477
01:09:10.850 --> 01:09:24.290
Patrik Stas: right Here's no messages coming. Basically So so after certain time, I' It just returns like you know, and kind of empty response, like nothing has arrived. And so there's There's this issue, and there's also

478
01:09:24.590 --> 01:09:26.719
Patrik Stas: uh

479
01:09:26.779 --> 01:09:29.380
Patrik Stas: so these new messages

480
01:09:33.450 --> 01:09:44.729
Patrik Stas: uh one of these just suits is more high level than the other one. I don't remember which one of them is it? But they are both seem like, Yeah, this looks more high level. Actually,

481
01:09:45.240 --> 01:09:46.500
Patrik Stas: uh,

482
01:09:47.819 --> 01:09:49.179
Patrik Stas: I guess,

483
01:09:49.510 --> 01:09:51.929
Patrik Stas: is on the service level.

484
01:09:52.680 --> 01:10:01.280
Patrik Stas: Yeah, both of these, both of these set. The suits are like relevant to to this long pool feature. I think it might be useful for you.

485
01:10:02.190 --> 01:10:29.570
George Mulhearn: Cool. So you you do the long poll uh, and then eventually something will get returned. Uh, and if it's within the thirty seconds it's a message, and then and then you act it and then lung Paul again. And then is that how it works? Yeah, Yeah, yeah, exactly. So you are. You are basically your You are like on your mobile device, like constantly are running this long, long polling loop, and whenever it returns you check the response. If

486
01:10:29.580 --> 01:10:42.830
Patrik Stas: it's returned, because there's a new message or just return, because nothing has right within thirty seconds. And if something is right, basically you you send this act request and probably

487
01:10:42.860 --> 01:10:59.719
Patrik Stas: on a sideways, you know. Uh you start downloading, you know you start actually downloading the messages from agency. Start processing them in some way. And again you you restart a long pull again, and i'll check for any new messages, and we just keep on going like this.

488
01:10:59.730 --> 01:11:05.640
Patrik Stas: So it saves a lot of, you know. So performance for agencies, especially.

489
01:11:07.940 --> 01:11:10.419
George Mulhearn: Wow: Yeah, that's really cool, cool.

490
01:11:15.730 --> 01:11:19.559
George Mulhearn: Um, Okay, One One more thing. If you have time.

491
01:11:20.360 --> 01:11:22.260
Patrik Stas: Yeah, for sure. It's fine.

492
01:11:22.350 --> 01:11:30.440
George Mulhearn: Um. So I think I think in the last meeting I was in maybe two weeks ago. Um! There was talk about

493
01:11:30.860 --> 01:11:36.699
George Mulhearn: uh making the connection handler, not as dependent on,

494
01:11:37.200 --> 01:11:40.239
George Mulhearn: you know. Mediator uh agency client.

495
01:11:40.280 --> 01:11:43.179
George Mulhearn: Is that something

496
01:11:43.600 --> 01:12:00.300
Patrik Stas: you guys have worked on or thought about since that meeting. Oh, I see now. You remind them me That was the point which I wanted to pull into the upcoming work. So yeah, exactly. So uh, uh remove uh the couple the couple of

497
01:12:00.820 --> 01:12:17.440
Patrik Stas: um mediation uh yeah, We we tend to like uh want to do that, and and the the Stav with Jamiro has done in a middle class has done in last week is gonna some of the relates to that. It was like.

498
01:12:18.070 --> 01:12:22.859
Patrik Stas: And then we know that, like Ob is in the first side. But, uh, basically

499
01:12:23.050 --> 01:12:24.410
Patrik Stas: uh,

500
01:12:26.150 --> 01:12:28.990
Patrik Stas: it, it led to some like general

501
01:12:29.330 --> 01:12:34.080
Patrik Stas: generalizations which we want, which are kind of good

502
01:12:34.410 --> 01:12:39.559
Patrik Stas: preliminary work to actually start it as non mediation. So

503
01:12:39.590 --> 01:12:41.349
Patrik Stas: uh,

504
01:12:45.160 --> 01:12:46.389
Patrik Stas: well,

505
01:12:46.820 --> 01:12:59.219
Patrik Stas: actually the the the the the reason for a Meta styles work. Was that because um we ourselves, you know, as uh consumers of Aries Vcx, we want to.

506
01:12:59.230 --> 01:13:06.979
Patrik Stas: Uh, we wanted to first get brief of mediation when the receive message, you know kind of messages

507
01:13:07.100 --> 01:13:08.290
Patrik Stas: uh

508
01:13:10.320 --> 01:13:20.590
Patrik Stas: addressed to our institution did so. Somebody results our did, uh, or some of the results are um video

509
01:13:20.650 --> 01:13:29.070
Patrik Stas: uh from the ledger uh based on our did and wants to send us connection, request, establish connection with us.

510
01:13:29.640 --> 01:13:31.650
Patrik Stas: We want to enable

511
01:13:31.660 --> 01:13:51.449
Patrik Stas: uh for this like message flow to be non-mediated, just simply arrived to our institutional agent, and therefore we had to adjust the the create connection from connection, request to make it a bit more general and uh, just enable this non-mediated workflow

512
01:13:51.460 --> 01:14:04.259
Patrik Stas: uh basically And this is like uh we're kind of deploying this now, And uh, yeah, getting the connection themselves to be non-mediated. This is uh, this is a second step for us. So

513
01:14:04.450 --> 01:14:10.510
Patrik Stas: But yeah, it's it's definitely important, and it will make the still library much more like

514
01:14:11.470 --> 01:14:19.010
Patrik Stas: usable, I think, because you are not forced to use some particular implementation of the agent, the mediator.

515
01:14:19.550 --> 01:14:25.250
Patrik Stas: Yeah, it's It's on the roadmap, I I think. Like maybe not. Uh, not this

516
01:14:26.510 --> 01:14:27.630
Patrik Stas: uh,

517
01:14:28.440 --> 01:14:45.389
Patrik Stas: not not sure exactly. When maybe this week or the next week we might be starting actually this piece of work. We are kind of uh on the Fans, whether we should first invest into the If a fire research or the uh. This connection Meditation decoupling

518
01:14:48.610 --> 01:14:49.870
George Mulhearn: Very cool,

519
01:14:50.560 --> 01:14:51.650
George Mulhearn: very cool.

520
01:15:07.610 --> 01:15:15.810
Patrik Stas: All right. Well, uh, does it cover uh, like your questions, or do you perhaps have uh something more on your mind.

521
01:15:16.210 --> 01:15:20.159
George Mulhearn: Um, no, no, that's that's it. I think it's my questions.

522
01:15:20.510 --> 01:15:21.889
George Mulhearn: Thanks for answering.

523
01:15:22.700 --> 01:15:23.940
Patrik Stas: Happy to do.

524
01:15:24.030 --> 01:15:31.370
Patrik Stas: Uh, all right, Then Then I guess we can wrap it up with a little bit of overdue. But that's fine. Um.

525
01:15:32.180 --> 01:15:33.710
Patrik Stas: So

526
01:15:33.760 --> 01:15:40.620
Patrik Stas: I guess so. The next meeting that will be the next Thursday, seventeenth uh

527
01:15:40.920 --> 01:15:43.809
Patrik Stas: same time as usual. Uh,

528
01:15:43.820 --> 01:16:03.989
Patrik Stas: yeah, George, I'll I'll I'll be uh if you, if you just uh yeah open that, Pr: you know. Until then there'll be like, uh, really awesome. And i'm really excited to to just see it and see all the magic coming together from all of you at him. It's going to be huge improvements.

529
01:16:04.130 --> 01:16:08.039
Patrik Stas: Um: yeah. Until then. Uh,

530
01:16:08.560 --> 01:16:16.110
Patrik Stas: I wonder if there's anything to say or wrap up with any particular statements.

531
01:16:16.370 --> 01:16:34.679
Patrik Stas: Yeah, it's It's gonna be a big Pr. For you guys through. It's fine. We'll We'll get through it, I guess. Uh yeah, I guess So Let's Let's Let's get to get through on this chord like together we do an option. Let's open the Pr. And uh,

532
01:16:34.720 --> 01:16:47.569
Patrik Stas: probably today or tomorrow we'll kind of either start working, uh, you know, mid of Falls kind of capacity will be either directed towards the If I kind of research for now,

533
01:16:47.900 --> 01:17:00.339
Patrik Stas: uh, or may it be going into one of these two uh both of them are important at the same time we have the the Pr. Open from Paul. It looks like small Pr: so we want to get merge that.

534
01:17:00.660 --> 01:17:05.129
Patrik Stas: Yeah, lots of things uh lots of things we have on the table.

535
01:17:05.340 --> 01:17:06.699
Patrik Stas: And just

536
01:17:07.200 --> 01:17:10.120
Patrik Stas: so soon soon coming together.

537
01:17:10.530 --> 01:17:24.379
Patrik Stas: Okay? Well, i'll i'll. I'll be looking forward for if if you join our next week i'll be happy to and um, and maybe some other people might join as Well, uh let's see next week. Um,

538
01:17:24.390 --> 01:17:30.910
Patrik Stas: thank you, George, for coming. It was. It was good to connect and to discuss all this stuff together.

539
01:17:31.040 --> 01:17:37.169
Patrik Stas: It's better than a one-man show

540
01:17:37.200 --> 01:17:41.799
Patrik Stas: alright, injured day. Thank you for coming late. I mean it's light for you. So

541
01:17:41.830 --> 01:17:47.439
George Mulhearn: good evening, and cheers next time cheers. Thank you.

542
01:17:47.630 --> 01:17:49.849
Patrik Stas: Thank you.

543
01:18:07.230 --> 01:18:09.779
Patrik Stas: Oh, man, I think I didn't record it.

