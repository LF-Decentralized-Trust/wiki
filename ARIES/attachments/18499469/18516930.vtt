WEBVTT

1
00:14:48.980 --> 00:14:50.080
George Mulhearn: Hello!

2
00:14:50.840 --> 00:14:52.910
@kukgini: Uh! Hello!

3
00:14:56.940 --> 00:14:58.210
ckowald: Hello! Hello!

4
00:14:59.500 --> 00:15:00.970
@kukgini: Of Hello!

5
00:15:03.090 --> 00:15:06.990
ckowald: Am I correct in that? This is the Area's. Vcx meeting?

6
00:15:09.430 --> 00:15:10.280
@kukgini: Um,

7
00:15:12.610 --> 00:15:13.500
@kukgini: Yes,

8
00:15:14.490 --> 00:15:15.460
ckowald: thanks.

9
00:15:34.980 --> 00:15:36.460
Patrik Stas: Hi! Everyone!

10
00:15:37.040 --> 00:15:38.170
George Mulhearn: Hey?

11
00:15:38.640 --> 00:15:39.830
@kukgini: Hello,

12
00:15:40.190 --> 00:15:46.069
Patrik Stas: hi! Cocaine, I see. Uh you. You arrive as well. Happy to have you here.

13
00:15:52.770 --> 00:15:55.249
Patrik Stas: Uh That's why it's a little bit more

14
00:15:55.410 --> 00:15:59.110
Patrik Stas: uh to see if uh anybody else is

15
00:15:59.720 --> 00:16:04.819
Patrik Stas: joining Today's meeting uh last week with go from Brazil.

16
00:16:05.390 --> 00:16:06.250
Patrik Stas: Uh!

17
00:16:06.760 --> 00:16:13.430
Patrik Stas: I was at four Am. Last week for him. So hopefully this at this time it will be easier

18
00:16:13.680 --> 00:16:16.749
Patrik Stas: to accommodate his time zone.

19
00:16:17.050 --> 00:16:21.890
Patrik Stas: Uh, in the meantime. Uh, I think we can start with Uh

20
00:16:22.640 --> 00:16:23.870
Patrik Stas: um!

21
00:16:24.720 --> 00:16:29.069
Patrik Stas: We can start with the uh obligatory. Uh

22
00:16:29.120 --> 00:16:32.060
Patrik Stas: um disclaimer of hyper ledger.

23
00:16:33.450 --> 00:16:38.259
Patrik Stas: Uh, I just have to find it. Uh, just give me one moment, please.

24
00:17:26.210 --> 00:17:29.170
Patrik Stas: Okay, Almost there, almost there.

25
00:17:49.570 --> 00:17:54.830
Patrik Stas: Okay, Now I have to figure out how to share my screen, and

26
00:17:56.020 --> 00:18:01.590
Patrik Stas: and for some reason I have some issues. With that it would appear that way.

27
00:18:07.130 --> 00:18:19.399
Patrik Stas: Well, I started my camera. How do I share my screen? Yeah, the button to share screen is straight out. So um. In that case I kind of display the slide. So

28
00:18:19.830 --> 00:18:27.149
Patrik Stas: uh i'll, i'll just read out the Hyperlanger uh anti-trust policy allowed so uh

29
00:18:27.160 --> 00:18:41.320
Patrik Stas: uh hyper ledger under trust policy, and all this uh Linux foundation involves um meetings involved participation by industry competitors, and it is the intention of the Linux foundation to conduct all this

30
00:18:42.970 --> 00:18:45.780
Patrik Stas: to trust.

31
00:18:45.820 --> 00:18:50.429
Patrik Stas: Is there for extremely important that attendees, and here to meeting agendas

32
00:18:50.790 --> 00:19:01.379
Patrik Stas: and be aware of and not participate in, any activities that are probably to be prohibited under applicable State federal, or foreign anti-trust and competition laws.

33
00:19:01.390 --> 00:19:12.850
Patrik Stas: Examples of this uh type of actions that are prohibited as an installation meetings, and in connection with Linux foundation activities are described in Linux foundation. Anti trust policy.

34
00:19:12.940 --> 00:19:32.080
Patrik Stas: Um. If you have a questions about these measures, please contact your Company Council, or if you are a member of Linux foundation feel free to contact Andrew uh up up deep role, or the firm of just more up to grow lp, which runs legal console to like some Linux foundation,

35
00:19:32.930 --> 00:19:40.449
Patrik Stas: all right. So now that we have uh this uh, we can move to our uh meeting agenda.

36
00:19:40.720 --> 00:19:49.079
Patrik Stas: Uh, so maybe we can first start uh uh, with uh, just a brief introduction Uh,

37
00:19:49.090 --> 00:20:14.209
Patrik Stas: it's to kind of get to know each other uh as I, as I mentioned cooking, you haven't been with us last week, but maybe you know we we We know each other briefly over the like uh the discussion. Maybe you had some full request or some comments sometimes. So uh, you know, you maybe know, you know, as a little bit. But anyway uh myself, uh my name is Patrick Stash.

38
00:20:14.610 --> 00:20:29.380
Patrik Stas: I'm. Uh I'm. Based in a bracket Republic, and i'm a contracting for uh South African Uh Bank. Um upset uh i'm One of the maintainer of uh of uh

39
00:20:29.700 --> 00:20:32.650
Patrik Stas: a hi.

40
00:20:32.850 --> 00:20:40.079
Patrik Stas: And uh, yeah, happy to have you here. So maybe you can just tell us a little bit, You know very base to

41
00:20:40.850 --> 00:20:47.819
Patrik Stas: what's company working for, and how or how you're using everything you saying something like that.

42
00:20:51.020 --> 00:20:56.330
@kukgini: Okay? Uh, I will start um.

43
00:20:57.040 --> 00:21:02.880
@kukgini: I am so excited that I can get an opportunity to introduce myself.

44
00:21:03.110 --> 00:21:08.700
@kukgini: Hmm. I'm. South Korean acting under the name of a cook, Jenny.

45
00:21:08.740 --> 00:21:11.680
@kukgini: But my real name is Zooming Flee,

46
00:21:12.150 --> 00:21:25.240
@kukgini: and I'm working at an architect and Lg. Cns, a System integration company in charge of the Lg. Groups. It systems.

47
00:21:25.880 --> 00:21:35.559
@kukgini: My organization has been researching Ssi for a past several years as a blockchain specialized organization,

48
00:21:35.910 --> 00:21:44.160
@kukgini: and our big term goal is building in the area space, the staff solution for

49
00:21:44.230 --> 00:21:46.440
@kukgini: our energy groups.

50
00:21:47.570 --> 00:22:04.010
@kukgini: And but, as you can see, i'm not very familiar with the English, so no money. Maybe I can understand correctly your speech. So uh

51
00:22:04.020 --> 00:22:10.379
@kukgini: so please for me to just time watching. By now.

52
00:22:10.570 --> 00:22:22.049
Patrik Stas: I think your English is fine. Oh, yeah, uh, Thank you for introduction, anyway. Uh: So yeah, I think we can. We can. Uh,

53
00:22:22.510 --> 00:22:38.999
Patrik Stas: no. This is, let me ask maybe one more question, if I may. Uh, are you? Are we currently using in some project? Or are we still in sort of research phase trying to maybe decide or experimenting with various implementations.

54
00:22:39.650 --> 00:22:49.329
@kukgini: Uh: yeah, I I won't try to use ares the Cx in a uh mobile app

55
00:22:49.490 --> 00:22:52.749
@kukgini: Is the holder, or call it. But

56
00:22:52.900 --> 00:22:58.760
@kukgini: uh, our organization uh to side uh our first product

57
00:22:58.780 --> 00:23:00.710
@kukgini: use. Uh:

58
00:23:04.950 --> 00:23:13.289
@kukgini: So yeah, And the cost that issue or verifier is based on occupied

59
00:23:13.560 --> 00:23:14.930
@kukgini: Mhm But,

60
00:23:15.470 --> 00:23:18.520
@kukgini: uh, you know, uh, someday,

61
00:23:18.540 --> 00:23:30.429
@kukgini: I will replace the all that part uh to uh Aries Pcx. Because it's. Uh, I think it's a better solution,

62
00:23:31.400 --> 00:23:43.750
George Mulhearn: I see. All right. Thank you. Thank you. So yeah, let's let's move to uh, to our agenda. Now. Uh I have my screen with the agenda. Is that easier?

63
00:23:45.980 --> 00:24:00.390
Patrik Stas: Uh, yeah, uh, I have a issues sharing my screen. Um, It's purely technical issue. So if I may ask you, George, yeah, could you? Could you share the screen with agenda?

64
00:24:04.140 --> 00:24:05.900
George Mulhearn: Can you? Can you see my screen?

65
00:24:06.920 --> 00:24:10.070
Patrik Stas: Um: Not yet.

66
00:24:11.360 --> 00:24:14.379
@kukgini: Oh, yeah, I can see. I can see it.

67
00:24:16.350 --> 00:24:23.729
Patrik Stas: Okay? So uh, the first one was to kind of overview the recent work which uh has been done.

68
00:24:23.860 --> 00:24:33.109
Patrik Stas: Uh: Oh, okay, that guys, I can share my screen now. Uh i'll, I'll do it so I can also open a github or

69
00:24:33.420 --> 00:24:34.830
Patrik Stas: stuff like that.

70
00:24:35.140 --> 00:24:40.400
Patrik Stas: Well, thank you. Thank you. Uh, i'll hop into the

71
00:24:42.240 --> 00:24:44.560
Patrik Stas: the latest state.

72
00:24:45.760 --> 00:24:50.930
Patrik Stas: Uh: yeah. So just kind of overview what has been done. So um

73
00:24:51.300 --> 00:25:09.540
Patrik Stas: uh, we have. Uh, we have a big Pr. Right now under way. Uh, we just removal of the Ffi layer between as Vcx and a Vdr. Tools uh that being this Pr. Uh. C. To one right here

74
00:25:09.550 --> 00:25:26.460
Patrik Stas: uh there's still some failure. So a colleague of mine is uh working on this actively. Uh it's a largely modifying the slash in the module. Uh, most mostly so a is Uh. Vcx

75
00:25:32.230 --> 00:25:41.269
Patrik Stas: uh in the uh. That's as as that's the module which is, which is linking is the Cx with uh Vvr tools.

76
00:25:41.480 --> 00:25:57.629
Patrik Stas: Uh. So there's a bunch of rework basically all of the calls into um vdr tools uh where it previously it was uh through, like C C Abi calls like this.

77
00:25:57.850 --> 00:26:07.580
Patrik Stas: Um, Now it's uh just looking directly into the rascal of rascal of Vdr. Tools uh making the same. I go on calls

78
00:26:07.900 --> 00:26:27.929
Patrik Stas: uh. So this is, this is under way. I should uh surely uh bring some performance boost, and uh, like safety boost, as we can be more sure with the typing. And uh, I think most importantly, even uh sort of maintenance of this. It will be just easier to kind of

79
00:26:27.940 --> 00:26:34.840
Patrik Stas: see the stock we are calling. It will be uh cumbersome to find out the interactions

80
00:26:35.060 --> 00:26:40.980
Patrik Stas: uh through the the the

81
00:26:42.030 --> 00:26:52.330
Patrik Stas: uh. So there's uh lots of changes, lots of like uh quite big delta here, but they are mostly in the uh, in the in the

82
00:26:52.460 --> 00:27:07.120
Patrik Stas: a module uh, there's uh, There's changes here in the other modules which I know. George uh from Anonym labs has been modifying. But uh, this is mostly uh imports.

83
00:27:07.490 --> 00:27:12.459
Patrik Stas: Um! So hopefully there won't be some sort of big conflict here

84
00:27:12.560 --> 00:27:30.360
Patrik Stas: uh to resolve. Um, then, if I move on to the next point uh we have merge some ci optimization uh pr uh, then my my done by myself uh throughout last week. Um!

85
00:27:30.420 --> 00:27:37.659
Patrik Stas: And they they arguably improve the ci, and most of all uh like clean that that made it more readable.

86
00:27:37.680 --> 00:27:52.569
Patrik Stas: Uh, however, uh, there's actually a new round of ci sort of reward under way where previously uh, we've been building uh basically running all of the tests

87
00:27:52.880 --> 00:27:58.410
Patrik Stas: and doing all lib Cx interactions in docker containers.

88
00:27:58.440 --> 00:28:06.980
Patrik Stas: Uh Now, we're trying to get rid of that and just run basically run, you know. Do all the work directly on the github runner

89
00:28:07.000 --> 00:28:13.309
Patrik Stas: Uh, as this turns out to be a much faster, it's easier to cash stuff

90
00:28:13.340 --> 00:28:16.539
Patrik Stas: uh, so there will be uh the Pr.

91
00:28:17.400 --> 00:28:22.159
Patrik Stas: We just have opens right

92
00:28:23.320 --> 00:28:36.880
Patrik Stas: uh right here uh It's still just uh we're in progress, so probably not worth it looking into. But, uh, the the consequences will be quite nice. I'm hoping this will make it easier for contributors to

93
00:28:36.920 --> 00:28:47.629
Patrik Stas: just all over the uh sort of the entry barrier, as the ci will be faster, it will be easier to contribute because it's it's it'll be faster good to get a feedback loop

94
00:28:48.050 --> 00:28:49.450
Patrik Stas: uh

95
00:28:49.890 --> 00:28:57.840
Patrik Stas: moving on to the next point we had a revocation, notification protocol implemented by

96
00:28:58.110 --> 00:29:08.039
Patrik Stas: a colleague of mine, met us all who is also, uh with us on the call uh so uh, that's something good yet to be uh

97
00:29:08.050 --> 00:29:27.929
Patrik Stas: would say, to be merged very soon. Uh, basically a revocation notification protocol uh enables issue of a credential to notify holder uh in whenever the the you know the issued credential uh has been revoked

98
00:29:27.940 --> 00:29:41.260
Patrik Stas: uh, so that way. The holder itself, you know it doesn't have to maybe check the ledger himself. Uh, but he will. He will be simply notified by the fact that you should revoke something

99
00:29:42.090 --> 00:29:43.020
Patrik Stas: uh,

100
00:29:43.380 --> 00:30:00.700
Patrik Stas: maybe touching on this briefly uh, something related is, uh Pr. Which we already closed uh, and that gives uh ability to hold her. This is use. This. This is useful, especially for the mobile use case

101
00:30:00.710 --> 00:30:10.010
Patrik Stas: uh this Pr. Gives a holder capability to find out uh by checking Ledger whether some credential has been revoked.

102
00:30:10.220 --> 00:30:11.490
Patrik Stas: Uh:

103
00:30:15.320 --> 00:30:32.599
Patrik Stas: so uh, okay, maybe one correction. Actually, my statement was not quite correct. This gives the the holder available ability to find out credential relocation. Id which is a piece of information we just needed

104
00:30:32.610 --> 00:30:50.899
Patrik Stas: uh to check whether a credit you know whether that Id has been revoked. So this is kind of preliminary step to enable the use case. But basically I can imagine that. Uh it will be it. It will be useful for, like mobile device, to do some periodic check

105
00:30:50.910 --> 00:31:07.519
Patrik Stas: to see if you know all of the holders credentials are still valid, and whether they have or have not been revoked, you know, in in in past, and perhaps somehow, you know, uh, show that you need to that fact in Ui

106
00:31:11.450 --> 00:31:12.310
Patrik Stas: uh,

107
00:31:12.660 --> 00:31:15.530
Patrik Stas: okay, and um.

108
00:31:17.660 --> 00:31:27.650
Patrik Stas: And next next uh last piece capable to to verify vocation status of credential. Yes, and that's what I just cover now.

109
00:31:27.980 --> 00:31:29.540
Patrik Stas: Uh,

110
00:31:30.320 --> 00:31:42.799
Patrik Stas: okay, next on it. Well, maybe I before I move on to the next point, i'll just stop for a second just to see if anybody has any question or feedback about

111
00:31:43.430 --> 00:31:45.300
Patrik Stas: what I've been talking

112
00:31:45.480 --> 00:31:46.990
Patrik Stas: up until now.

113
00:31:55.350 --> 00:32:04.899
Patrik Stas: So it seems like everyone everyone's good. Uh. So uh next point on the agenda we have, like a a short presentation from George. Uh,

114
00:32:04.970 --> 00:32:06.560
Patrik Stas: um,

115
00:32:06.710 --> 00:32:13.459
Patrik Stas: and uh, yeah, So maybe we can move. Move on to that, George, can I give you the mic?

116
00:32:13.520 --> 00:32:16.680
George Mulhearn: Yes, sure, sure. Thank you.

117
00:32:16.940 --> 00:32:23.480
George Mulhearn: Um. Am I able to share my screen? But yeah, I think uh to

118
00:32:24.580 --> 00:32:25.750
Patrik Stas: um.

119
00:32:28.270 --> 00:32:31.800
Patrik Stas: I have to figure out. Oh, yeah,

120
00:32:36.100 --> 00:32:54.689
George Mulhearn: okay, Um. So it was touched on in the last Uh. Vcx meeting that Um, A big goal of Vcx is to sort of uh modularize the dependency on Vdr tools, and, you know, make it not so hard coupled with it.

121
00:32:54.820 --> 00:33:12.179
George Mulhearn: Um, so that's the changes I've been working on recently um as part of some mobile uh agent work I've been doing, and a used case to use Vcx without using video tools without any Indie dependencies.

122
00:33:12.910 --> 00:33:23.109
George Mulhearn: Um: So this is basically a diagram explaining the architecture of Vcx. Um currently, and how it works.

123
00:33:23.150 --> 00:33:40.429
George Mulhearn: So you, as a consumer of Vcx um, you carry around uh via tools, while it handles and pull handles, and you also maintain and carry around uh all these handler objects. So connections and holders and provers

124
00:33:40.650 --> 00:33:44.379
George Mulhearn: um representing uh the protocol that you're doing

125
00:33:45.200 --> 00:33:54.039
George Mulhearn: um. And so basically how it'll work at the moment is um. You pass in your wallet and pull handles into the handlers,

126
00:33:54.130 --> 00:34:03.259
George Mulhearn: and then they call on to the protocols uh under the Protocols Directory, and there's all the state machines for the different types of actors in these interactions.

127
00:34:03.330 --> 00:34:09.169
George Mulhearn: Uh, and then eventually those Indie pull handles and what it handles get passed off to

128
00:34:09.250 --> 00:34:11.539
George Mulhearn: um the Indie Directory,

129
00:34:11.600 --> 00:34:29.540
George Mulhearn: and in the Indie Directory. There is, you know, lots of rappers over those video tools, methods, um, and also some functions which sort of aggregate together many different uh Indie functions to do to do different types of things all at once.

130
00:34:30.389 --> 00:34:31.609
George Mulhearn: Um:

131
00:34:32.290 --> 00:34:44.569
George Mulhearn: And yeah. So that's sort of how it depends on video tools at the moment. Um, mainly through the requirement to carry around, pull and and wallet handles and pass them in

132
00:34:45.630 --> 00:34:47.370
George Mulhearn: um. So

133
00:34:48.230 --> 00:35:04.509
George Mulhearn: what I've proposed and have been working on is uh basically the idea is, instead of carrying around um wallet and pull handles, you'll carry around a profile. And the idea of a profile is basically

134
00:35:04.520 --> 00:35:10.069
George Mulhearn: a structure that holds all of your dependencies for the different types of

135
00:35:10.350 --> 00:35:22.809
George Mulhearn: the different types of uh protocols that go on um so within a profile. You have a non-creds functionality uh ledger functionality and wallet functionality.

136
00:35:23.310 --> 00:35:24.450
George Mulhearn: Um.

137
00:35:24.610 --> 00:35:34.920
George Mulhearn: And so this is modeled after how acupy I have done it because they went through a similar period where they were coupled tightly with, uh the in the sdk,

138
00:35:35.010 --> 00:35:46.919
George Mulhearn: and then to sort of separate out um that built this profile structure, and you're able to put in your own dependencies for each of these subsections. Um.

139
00:35:47.440 --> 00:35:48.560
So

140
00:35:49.430 --> 00:35:54.239
George Mulhearn: basically, when you're using uh an Indie Sdk version of this profile

141
00:35:54.280 --> 00:35:56.470
George Mulhearn: um you'll carry around

142
00:35:56.580 --> 00:36:12.959
George Mulhearn: and in the Sdk implementation of a non-creds in the Sdk implementation of ledger and in the sdk implementation of Wallet, and that houses all your functionality and then under each of these structs is um methods for all of the

143
00:36:13.130 --> 00:36:18.179
George Mulhearn: uh a non-cred uh ledger interactions and world interactions that you need.

144
00:36:18.330 --> 00:36:24.860
George Mulhearn: Um. And so my implementation of this just points back to the existing stuff that's within

145
00:36:25.000 --> 00:36:27.109
George Mulhearn: um the Indie Directory.

146
00:36:27.250 --> 00:36:32.489
George Mulhearn: So it points to all of those um rapper methods that have already been created.

147
00:36:33.550 --> 00:36:35.080
George Mulhearn: Um! And then,

148
00:36:35.380 --> 00:36:47.079
George Mulhearn: in addition to the default in the profile Um, I've built this modular wallet profile, and it's basically a different um

149
00:36:47.440 --> 00:36:55.950
George Mulhearn: way of constructing this profile that doesn't depend on the in the sdk at all. Um! So that decouples you from vdr tools.

150
00:36:56.200 --> 00:37:14.130
George Mulhearn: So for this implementation um, I have an Indie credits version of a non-creds in India and Dvdr version of ledger interactions, and a a pluggable wallet. So any wallet can be plugged into that, whether it's as

151
00:37:14.140 --> 00:37:19.700
George Mulhearn: um, you know, some in memory thing for testing or even an Indie wallet can be plugged in.

152
00:37:20.010 --> 00:37:23.790
George Mulhearn: Um. And so yeah, for the Indie Credits

153
00:37:23.860 --> 00:37:28.539
George Mulhearn: Functionality of an on credit, of course, points to the Indie credits dependency.

154
00:37:28.890 --> 00:37:32.589
George Mulhearn: Um and media points to Indie video, which is,

155
00:37:32.690 --> 00:37:37.979
George Mulhearn: oh, sorry. So credit is a part of the Indie shared Rs. And this is a separate dependency.

156
00:37:38.970 --> 00:37:56.049
George Mulhearn: Um! And as part of this work um, so as I mentioned, there's a lot of stuff in the Indie Directory. Um, it's mostly rappers over the Indie functions. Um, so you know, wraps it up with Vcx errors and other stuff.

157
00:37:56.060 --> 00:38:01.999
George Mulhearn: Um, But there's also a lot of stuff, useful stuff which aggregates together multiple calls.

158
00:38:02.050 --> 00:38:06.740
George Mulhearn: Um. So, for example, in the signing module

159
00:38:07.010 --> 00:38:12.950
George Mulhearn: um, there's methods for assigning connection, response messages and things of that nature.

160
00:38:12.980 --> 00:38:16.019
George Mulhearn: Um, which aren't, you know directly Indie related.

161
00:38:16.080 --> 00:38:18.339
George Mulhearn: So for all of that um

162
00:38:18.450 --> 00:38:19.830
George Mulhearn: none

163
00:38:19.990 --> 00:38:24.250
George Mulhearn: non-specific indie stuff. I've moved this out to

164
00:38:24.340 --> 00:38:30.659
George Mulhearn: another module um, so that it can be used with profiles rather than with wallets, and pull handles

165
00:38:31.830 --> 00:38:35.079
George Mulhearn: um, and i'm yet to come up with a name for that.

166
00:38:35.630 --> 00:38:36.859
George Mulhearn: Um.

167
00:38:37.530 --> 00:38:49.130
George Mulhearn: So yeah, as the consumer, you'll now carry around a profile uh a profile trait um instead of your pool and wallet handles

168
00:38:50.740 --> 00:38:52.629
George Mulhearn: um, and

169
00:38:52.940 --> 00:38:57.600
George Mulhearn: to sort of illustrate the difference. Um! So this is

170
00:38:57.620 --> 00:39:04.630
George Mulhearn: within uh the rust agent implementation, which is a rust agent that uses a

171
00:39:05.380 --> 00:39:17.359
George Mulhearn: um. So this is the structure for the agent, so you know, Originally it would carry around a wallet handle and a pool handle. Um! But now, instead, it can carry around a profile. Um!

172
00:39:17.420 --> 00:39:26.049
George Mulhearn: And why this has to be arc is still something i'm working on and figuring out, if it definitely has to be so just gloss over that for now.

173
00:39:27.190 --> 00:39:29.580
George Mulhearn: Um! So that's what's stored in there

174
00:39:30.110 --> 00:39:33.539
George Mulhearn: and then, you know, for the agents connection stuff.

175
00:39:33.730 --> 00:39:37.639
George Mulhearn: Um, you know, when it wants to create an invitation

176
00:39:37.750 --> 00:39:43.960
George Mulhearn: instead of calling connection with the wallet, handle. It just calls it with the profile instead.

177
00:39:45.900 --> 00:39:51.200
George Mulhearn: Um, And you know lots of things like that, and similar for

178
00:39:52.080 --> 00:39:54.779
George Mulhearn: um prover, for example,

179
00:39:55.060 --> 00:39:57.499
George Mulhearn: uh prove us sending a proposal

180
00:39:57.530 --> 00:40:05.440
George Mulhearn: rather than having to pass in an Indie handle and an Indie uh pull handle. You can pass in your profile instead,

181
00:40:05.520 --> 00:40:11.050
George Mulhearn: and then, you know, this is going to use a non-creds and uh ledger

182
00:40:11.220 --> 00:40:17.849
George Mulhearn: interactions under the hood. So you know, the profile will resolve its dependency for that, and

183
00:40:17.980 --> 00:40:25.749
George Mulhearn: use its respective dependency at the moment. I have the agent pointing to just the in the Sdk profile. Um. But

184
00:40:25.840 --> 00:40:30.200
George Mulhearn: the next step for me is to try pointing it out here and see if it's still

185
00:40:30.950 --> 00:40:32.890
George Mulhearn: functions as expected.

186
00:40:36.490 --> 00:40:37.649
George Mulhearn: Um,

187
00:40:37.670 --> 00:40:44.219
George Mulhearn: yeah. So what's remaining is to put up the Ml. For that and get the community having to look at it.

188
00:40:44.670 --> 00:40:53.280
George Mulhearn: Um, I still have some integration test to flesh out, and a lot of documentation. Um!

189
00:40:53.480 --> 00:41:02.500
George Mulhearn: And I need to come up with a simple solution for handling all the breaking changes in the Lib. Vcx.

190
00:41:02.530 --> 00:41:03.830
George Mulhearn: Um.

191
00:41:04.110 --> 00:41:17.830
George Mulhearn: But I think I think we can come up with a simple solution for that. And then towards the future we can move towards a sophisticated thing where the Vcx consumers can construct their own profiles. However, they like

192
00:41:18.200 --> 00:41:20.000
George Mulhearn: and things of that nature.

193
00:41:21.170 --> 00:41:22.180
George Mulhearn: Yeah,

194
00:41:22.760 --> 00:41:37.329
Patrik Stas: yeah, thank you. Thank you. Jar so much. Uh I. It's uh, just for maybe transparency. I already like we already have the session with George. Uh and uh, we're basically uh, you know, to present the same thing.

195
00:41:37.340 --> 00:41:58.499
Patrik Stas: Uh. So I just wanted to, You know. I I invited George to prison in here in open uh, just to make sure that we operate, You know opera transparently, and this is obviously very like very well done. So as a as I said uh in proud i'm saying out here as well, uh, I think I I really like the idea. I think it's uh very well

196
00:41:58.510 --> 00:42:15.599
Patrik Stas: uh thought through and kind of like, you know, really prepared. And all these diagrams also very nice. Uh: So yeah, really, really uh, awesome John George. Um. Happy that, you know we have this uh community efforts. Now. Um,

197
00:42:15.820 --> 00:42:37.429
Patrik Stas: yeah. So uh, we we have Uh, we have, uh requested for you, George, and the Uh. Contribution, like Ais v. Six, contribute to role to repository. So uh, whenever you have moment. Just it. It will be great if you open Pr. There, so we can, you know, check those changes and kind of

198
00:42:37.440 --> 00:42:56.530
Patrik Stas: keep keeping track uh, like, you know. Possible uh possible uh conflicts in the code. So maybe we can like keep, you know. Kind of uh keep it in kind of consider it when we do some changes considered uh your delta, which is as open, important

199
00:42:56.540 --> 00:42:58.120
Patrik Stas: Uh: open. Pr:

200
00:42:58.160 --> 00:43:12.290
George Mulhearn: Yeah, Yeah. The The Delta is getting pretty pretty big on this one. Um: But yeah, yeah. So yeah, I've been working on my own, for in my own branch. But I need to move that um

201
00:43:12.430 --> 00:43:16.119
George Mulhearn: into hyper ledger as well on my own branch there.

202
00:43:16.310 --> 00:43:18.610
George Mulhearn: But yeah, it sounds like um

203
00:43:19.220 --> 00:43:35.959
George Mulhearn: uh the changes to the Ffi layering won't affect me too much. Uh It seems like like the interfaces for the Indie functions. Haven't changed. Really, It's just what's happening inside, you know, using controllers and types.

204
00:43:36.600 --> 00:43:39.139
George Mulhearn: So I think I should be good at that.

205
00:43:39.860 --> 00:44:07.500
Patrik Stas: Yeah, yeah, uh, maybe one uh you. I think you might currently, if you were based on the latest master. You may. I think you will run into conflicts on my whole, on a holder like state machines. Uh, I don't know how much changes you had to done there, but there's been some a reorganization and restructuring function. It's one of the pull request we we merge last week, where originally we had this,

206
00:44:07.520 --> 00:44:25.270
Patrik Stas: we have we used to uh up up until last week we had this very different sort of approach in the connection State machine and all the other State machine where connection, state machine was kind of nicely uh split it out into either individual methods, whereas

207
00:44:25.280 --> 00:44:40.599
Patrik Stas: implementations of State machines for holder, issue, or verifier and prover uh, they typically have this like one giant uh function called handle message, or something like that step function,

208
00:44:40.610 --> 00:44:45.600
Patrik Stas: and uh, and it's it's just perform some action based on

209
00:44:45.900 --> 00:45:05.100
Patrik Stas: past in enumeration. So this has been split into uh, you know, individual small functions which are the the the handle message functions still exist, but it is calling smaller function now small function. So I think you you you will have some conflicts there. So

210
00:45:05.190 --> 00:45:23.580
Patrik Stas: uh sorry. On On the other hand, this is like This is like long overdue, where, uh, as a technical, that from the past which we finally kind of paid off, and it, the code looks much much nicer and much more readable. It sounds like a good change.

211
00:45:23.590 --> 00:45:26.670
Patrik Stas: Yeah. Props to

212
00:45:26.900 --> 00:45:39.930
Patrik Stas: fighting through these. Okay, uh. So moving on to the next pieces in agenda. Uh, i'll share my screen again.

213
00:45:41.630 --> 00:45:50.209
Patrik Stas: I figured out how to do it. Uh, I've been using zoom for a while. So um

214
00:45:50.320 --> 00:45:53.810
Patrik Stas: uh yeah, We have create that. Uh

215
00:45:53.930 --> 00:46:07.629
Patrik Stas: come on board uh on my Github projects. So if you go to I navigated navy navigated directly from the repo, so you open the repository, and you go to our idea projects.

216
00:46:07.880 --> 00:46:24.619
Patrik Stas: Uh, there's only one there is Vcx, and we have this come on board. Basically it's a reflect, as in the current state. It is reflecting the list of issues we have, uh, where we previously been tracking the work. So

217
00:46:24.680 --> 00:46:30.799
Patrik Stas: uh, now we kind of fast put it out in this uh a bunch of columns, and uh,

218
00:46:30.880 --> 00:46:37.600
Patrik Stas: I don't know. Maybe we can figure out what what those calls should be named for. Now, the way I organize this.

219
00:46:37.740 --> 00:46:44.830
Patrik Stas: I put sort of higher priority, or like things we want to do in a closer future into to do,

220
00:46:45.250 --> 00:46:53.580
Patrik Stas: and things just to keep in mind, uh for the later future into the backlog uh column.

221
00:46:53.710 --> 00:46:54.709
Patrik Stas: Um,

222
00:46:55.730 --> 00:47:01.100
Patrik Stas: So I think these actual links uh well,

223
00:47:01.590 --> 00:47:02.899
Patrik Stas: um

224
00:47:05.490 --> 00:47:15.460
Patrik Stas: to the next piece on agenda, which is the upcoming work. Uh, so I think if uh, too many tax open

225
00:47:15.520 --> 00:47:23.050
Patrik Stas: uh So one of the most uh important pieces, I think, uh, in upcoming future,

226
00:47:23.060 --> 00:47:43.340
Patrik Stas: uh which we mentioned last week as well, is the implementation of non-mediated connection, handle and load mediated public agent as right. Now, if you want to use, you know, If you want to establish connection with Ariz Vcx, you are essentially forced to deploy Dcx agency notes, maybe it, or somewhere

227
00:47:43.350 --> 00:48:00.670
Patrik Stas: uh in order for as V. Six to function. So we want to uh remove this limitation uh basically want to still enable uh, whoever wants to use to let him use uh the existing connection with mediator. But, uh,

228
00:48:00.680 --> 00:48:15.519
Patrik Stas: we want to outlook the possibility of, you know, having connection which is just. Stand alone without mediation and let it up to the the every six, user the developer uh to decide.

229
00:48:15.720 --> 00:48:21.839
George Mulhearn: Do I have an approach in mind for that? Or is it saying, you guys still thinking about.

230
00:48:22.490 --> 00:48:25.510
Patrik Stas: Uh, yeah, it's uh.

231
00:48:26.660 --> 00:48:31.170
Patrik Stas: There's like few questions coming up like I try to.

232
00:48:31.700 --> 00:48:37.080
Patrik Stas: I try to draft out the like this work before. Uh,

233
00:48:37.150 --> 00:48:40.200
Patrik Stas: and I run into like few questions.

234
00:48:40.240 --> 00:48:43.120
Patrik Stas: Uh, for example,

235
00:48:43.240 --> 00:48:46.759
Patrik Stas: uh, right now, we implement collection

236
00:48:46.830 --> 00:49:01.990
Patrik Stas: protocol um, And but arguably in the future we want to implement did exchange protocol, which is like the next generation. Uh, and then the question is like, should both of these protocols be like under

237
00:49:02.000 --> 00:49:08.920
Patrik Stas: the same handle connection, handler and a user would somehow choose which of them he wants to use,

238
00:49:08.960 --> 00:49:15.250
Patrik Stas: and it will share the same connection. Interface, or should it be like two different handlers.

239
00:49:15.460 --> 00:49:23.090
Patrik Stas: Uh. And the reason why I'm saying is because it is gonna be like two different handlers.

240
00:49:23.120 --> 00:49:33.970
Patrik Stas: Uh then I think there there there might be lots of duplication uh like in both cases. Arguably, you can choose or choose not to.

241
00:49:34.320 --> 00:49:39.809
Patrik Stas: Uh used a mediator. And um,

242
00:49:40.870 --> 00:49:46.949
Patrik Stas: yeah, it's just the question like how to structure it, Should we, you know, or should we,

243
00:49:47.480 --> 00:49:57.879
Patrik Stas: how to structure like connection, and did exchange for a calls in the future? Should it be under the same kind of roof or separate? And then, uh,

244
00:49:58.050 --> 00:50:01.109
Patrik Stas: basically also, same

245
00:50:01.360 --> 00:50:13.839
Patrik Stas: kind of question comes up with just removal of the mediator itself. So shall we just make the current connection handler smarter in a sense that

246
00:50:14.080 --> 00:50:21.200
Patrik Stas: you would somehow opt in or opt out to use the mediator. But it would be one interface as it is now,

247
00:50:21.410 --> 00:50:39.279
Patrik Stas: or should it? Should we have like different handler for these two different cases, like something like connection as exist today, and some let's call it non mediated connection, handle and have them, you know, as a siblings uh

248
00:50:39.290 --> 00:50:56.090
Patrik Stas: next to each other. But then, again, the if you have it separate uh, It's nice, because you can have different Api's. Obviously the non-medated connection. We don't have functions like download messages,

249
00:50:56.100 --> 00:50:59.980
Patrik Stas: which is something you want with the mediated connection.

250
00:51:00.220 --> 00:51:14.279
Patrik Stas: But then, if you start to think, okay, but in the future we want to add the Did Exchange. Then are we gonna have four of these handlers for each variation. Or are we gonna put it? You know, underneath them

251
00:51:14.290 --> 00:51:31.650
Patrik Stas: it just yeah. So this is kind of the kind of questions which are popping up in, and you know, when we, when we think about it, I think, or at least for me, the things that are unclear, but one way or another we we definitely want to, you know. Uh,

252
00:51:31.730 --> 00:51:33.510
Patrik Stas: remove the dependencies.

253
00:51:33.810 --> 00:51:53.579
George Mulhearn: Am I? Am I right in thinking that you can almost use it in a non mediated mode at the moment, like if you're passing in the message yourself to specific methods. Um, you know, rather than doing. Find and handle message you do just to handle message.

254
00:51:53.970 --> 00:51:57.799
Patrik Stas: Um. So

255
00:51:58.450 --> 00:52:00.250
Patrik Stas: in case of like

256
00:52:00.850 --> 00:52:02.609
Patrik Stas: is um

257
00:52:02.740 --> 00:52:17.729
Patrik Stas: any case of issuance protocol, or, you know, proved verification for the call. They don't know about connections, so in in their case you can have it without an aviation, because they're unaware. But then connection protocol. There is

258
00:52:17.740 --> 00:52:23.470
Patrik Stas: The code directly, you know, is in some cases interacting with that

259
00:52:23.530 --> 00:52:25.100
Patrik Stas: agency.

260
00:52:25.170 --> 00:52:34.639
Patrik Stas: Uh, and it is creating, you know, when you create a connection object, it Uh, it calls the agency to create sort of like uh

261
00:52:34.740 --> 00:52:45.680
Patrik Stas: account there. Yeah. Uh. So with connection protocol connection, handler as it is today, you you have to uh have

262
00:52:45.790 --> 00:52:47.759
Patrik Stas: the mediator deployed.

263
00:52:48.740 --> 00:52:49.569
Hmm.

264
00:52:50.300 --> 00:52:59.000
@kukgini: I wonder if this feature also had the return route thing uh

265
00:52:59.850 --> 00:53:02.160
@kukgini: return route Decorator

266
00:53:03.780 --> 00:53:07.580
Patrik Stas: uh Sorry, Which Which decorator

267
00:53:08.110 --> 00:53:12.280
@kukgini: uh recon route to to return route.

268
00:53:12.640 --> 00:53:15.910
@kukgini: Yeah, there is. An for that.

269
00:53:16.260 --> 00:53:22.539
Patrik Stas: Yeah, I I am not aware of this this one. So uh

270
00:53:22.670 --> 00:53:24.730
Patrik Stas: oh, I don't think we have that

271
00:53:35.800 --> 00:53:38.580
@kukgini: yeah transport to to around. Yeah,

272
00:53:39.070 --> 00:53:43.069
@kukgini: uh Rsc: zero zero nine, two

273
00:53:48.320 --> 00:53:52.730
Patrik Stas: uh zero zero

274
00:53:53.520 --> 00:53:54.899
@kukgini: to First Link,

275
00:53:57.210 --> 00:54:03.219
@kukgini: He said that when on uh a message. They have a case

276
00:54:03.270 --> 00:54:05.430
@kukgini: transport decorator.

277
00:54:05.650 --> 00:54:07.819
@kukgini: The uh

278
00:54:09.050 --> 00:54:17.039
@kukgini: counterparty agent returns the response directly at the response.

279
00:54:18.770 --> 00:54:21.560
Patrik Stas: Oh, yeah, we don't implement this,

280
00:54:22.150 --> 00:54:28.000
Patrik Stas: but uh, we can take a look into this, and i'm I don't really know much about it. So

281
00:54:28.070 --> 00:54:33.460
Patrik Stas: uh i'll take a look. Um, but uh, yeah, I mean any uh, Apparently it's

282
00:54:33.700 --> 00:54:48.190
Patrik Stas: It's a fairly old Rfc. Probably matured, so it's certainly something we can consider implementing or uh can be contributed. Uh, I just not sure right now how it sort of links uh,

283
00:54:48.290 --> 00:55:04.620
Patrik Stas: you know, with the changes we are planning for, how to just kind of concept conceptualize and how to put it together. But, uh, i'll take a look at this, and uh, I don't know. Maybe we next week we can discuss it.

284
00:55:04.630 --> 00:55:09.960
Patrik Stas: Is it? Is this something? What's important for uh your use. Case?

285
00:55:10.590 --> 00:55:19.070
@kukgini: Uh, yes, it is in my country. We they mediator is very uh

286
00:55:19.200 --> 00:55:20.089
@kukgini: yeah,

287
00:55:20.520 --> 00:55:23.860
@kukgini: hard to keep the

288
00:55:24.480 --> 00:55:25.589
@kukgini: uh in

289
00:55:25.920 --> 00:55:27.830
@kukgini: personal information.

290
00:55:27.960 --> 00:55:28.890
@kukgini: Uh

291
00:55:30.180 --> 00:55:34.129
@kukgini: because of our relations regulation.

292
00:55:34.290 --> 00:55:35.859
@kukgini: So

293
00:55:36.180 --> 00:55:40.640
@kukgini: we are trying to remove the mediator and

294
00:55:40.720 --> 00:55:42.490
@kukgini: don't use it at all.

295
00:55:42.630 --> 00:55:44.240
Patrik Stas: Mhm Mhm

296
00:55:44.410 --> 00:55:47.180
@kukgini: Yeah, yeah, yeah,

297
00:55:47.900 --> 00:55:54.529
Patrik Stas: okay, I'll: i'll. We. We can put this on agenda for the next week. Just kind of discuss with you.

298
00:55:54.560 --> 00:55:57.709
Patrik Stas: I'll definitely have a loop myself.

299
00:55:57.840 --> 00:55:59.729
Patrik Stas: Um, Thank you.

300
00:56:01.490 --> 00:56:05.740
Oh, well, So yeah, this is the connection where we are planning. Uh:

301
00:56:05.810 --> 00:56:20.950
Patrik Stas: uh, yeah, then, this this space I was thinking, since most of our uh like uh users, uh, are we working on Mobile? I would like to put together some like a guide, a short guide of like

302
00:56:20.960 --> 00:56:37.639
Patrik Stas: uh, maybe recommendations, or how to approach mobile with Uh Vcx is. We do have some experience with mobile uh like Mobile on top of everything we see ourselves, and just, I guess, to flesh it out uh like very briefly. Um

303
00:56:38.370 --> 00:56:46.420
Patrik Stas: don't use uh update state um as far as possible. It's the kind of uh pattern we want to get rid of, because

304
00:56:46.470 --> 00:56:51.770
Patrik Stas: uh the update state uh methods. They are very convenient, because,

305
00:56:51.790 --> 00:56:53.140
Patrik Stas: um,

306
00:56:53.400 --> 00:57:04.180
Patrik Stas: you know, they they progress. The The product calls forward, and that's what you want. But problem is, you have very little uh like idea and control about,

307
00:57:04.240 --> 00:57:10.869
Patrik Stas: You know, all these really happening, and into what kind of state we have progressed. Typically, you want to

308
00:57:10.910 --> 00:57:13.029
Patrik Stas: you, you as a like

309
00:57:13.150 --> 00:57:23.630
Patrik Stas: in in the role of the mobile device. You receive a message, or we dial all the message from from an agency. We want to take a look at what kind of message it is.

310
00:57:24.370 --> 00:57:41.499
Patrik Stas: Then right. You need to resolve the right object, the right connection or the right credential, and basically just use the message to update the protocol. Um, what's uh what we did like long time ago, when we're starting out

311
00:57:41.510 --> 00:57:50.300
Patrik Stas: uh is that we don't, we we, we, we, we we would receive a notification, for example, uh that uh

312
00:57:50.550 --> 00:58:03.309
Patrik Stas: a message, for you know a message has arrived, and then we will maybe identify which which credential object this message relates to, and we would call update State

313
00:58:03.320 --> 00:58:21.410
Patrik Stas: and the update States. Then we download the message from the mediator, and then do all the magic itself. It progresses. The State maybe replies to a message. But uh, in general, this is this is like this: turn to the uh like an anti-p pattern, because it just

314
00:58:21.420 --> 00:58:29.010
Patrik Stas: doesn't really give you a good control and sense of what is happening. Uh. So we just much better approach to

315
00:58:29.580 --> 00:58:46.580
Patrik Stas: come up with, and like very clear step like you don't want the message you you resolve the particular object which the message relates to. Then you just called update. Stay with message, or you know, or or make some this transition.

316
00:58:46.670 --> 00:58:47.890
Patrik Stas: Uh,

317
00:58:47.910 --> 00:58:49.860
Patrik Stas: and you can check the resolve.

318
00:58:50.470 --> 00:59:08.150
Patrik Stas: So this is the I think this is like the core piece like core, The main idea which which I wanted to get out uh kind of uh just make sure that everybody is aware of it, and probably hopefully, you know, won't fall into the same uh mistake as we did uh,

319
00:59:08.420 --> 00:59:20.120
Patrik Stas: and I just to be aware that in general we want to probably get rid of this generic update stadium. I think, uh update state methods which are currently implemented on that.

320
00:59:20.170 --> 00:59:25.569
Patrik Stas: Uh, I think all of the all of the objects, at least on the

321
00:59:26.410 --> 00:59:27.930
Patrik Stas: um

322
00:59:27.990 --> 00:59:39.290
Patrik Stas: well, and then so so I won't. Write this down, maybe as a as a as a guide on a week, or maybe somewhere to the repo something like that put it into a text.

323
00:59:40.040 --> 00:59:44.139
Patrik Stas: Uh and lastly, um, we had some

324
00:59:44.470 --> 00:59:50.459
Patrik Stas: uh there starts to be some discussions about uh

325
00:59:50.860 --> 00:59:58.369
Patrik Stas: the Id document a resolution uh on a sovereign ledger using a

326
00:59:58.570 --> 01:00:00.500
Patrik Stas: uh, so

327
01:00:00.690 --> 01:00:04.680
Patrik Stas: for that i'll open this issue. We have here.

328
01:00:05.400 --> 01:00:06.640
Patrik Stas: Um

329
01:00:08.400 --> 01:00:10.330
Patrik Stas: has been some discussion

330
01:00:11.370 --> 01:00:12.550
Patrik Stas: opening up.

331
01:00:14.530 --> 01:00:18.169
Patrik Stas: Uh, this is not this issue Six hundred and nine

332
01:00:19.150 --> 01:00:23.469
Patrik Stas: uh so just to uh kind of give you a background. Um,

333
01:00:24.070 --> 01:00:27.529
Patrik Stas: the way we write. Um,

334
01:00:32.200 --> 01:00:48.009
Patrik Stas: you know. Uh in in in the role of uh public institution, the the public public institution typically typically wants to write their service endpoint on the ledger and uh, all the necessary keys

335
01:00:48.020 --> 01:01:04.360
Patrik Stas: uh to interact, you know, to to interact with that endpoint as as as far as uh how to encrypt messages being sent to the endpoint. So the way uh we write this into information right now on the ledger. If you use a

336
01:01:04.560 --> 01:01:19.019
Patrik Stas: in the role of institution. Uh, we sent at three transaction, and basically that a trip transaction, you know, rights uh following, you know, like attribute

337
01:01:19.110 --> 01:01:29.809
Patrik Stas: for following payload as a attribute of the Id, and then um. So we So we write separately with spin keys, routing keys, service endpoint.

338
01:01:30.110 --> 01:01:36.810
Patrik Stas: Uh, these are like, typically what is, you know, this is typically included in uh,

339
01:01:36.900 --> 01:01:40.279
Patrik Stas: like uh connection invitations. But

340
01:01:40.370 --> 01:01:42.990
Patrik Stas: in case that institution

341
01:01:43.060 --> 01:01:58.999
Patrik Stas: simply wants to give you a did. Then it's up to the the device or the the the recipients to resolve that did into the dog, and that's the dog should include, You know, this sort of information. Uh:

342
01:01:59.010 --> 01:02:09.180
Patrik Stas: So this is the way we write it right now. The problem is um, that uh, the specification which came out in uh

343
01:02:09.320 --> 01:02:18.889
Patrik Stas: February this year. Uh for sovereigned method. Uh, it's specified the format somewhat different.

344
01:02:18.910 --> 01:02:20.270
Patrik Stas: Um!

345
01:02:21.780 --> 01:02:35.850
Patrik Stas: So they also have routing keys uh that will be shared. They have endpoint. There's a formatting differences, obviously, as you can see, but another formatting itself that's like, uh, more or less minor thing.

346
01:02:36.080 --> 01:02:37.540
Patrik Stas: Uh

347
01:02:37.770 --> 01:02:51.120
Patrik Stas: so. But but it's still something we need to address, and that's why this Pr. Exist. So the first thing is just kind of align in terms of formatting. Uh, because this is the type of thing which uh

348
01:02:51.130 --> 01:02:58.290
Patrik Stas: so, for example, Aka, I would write on the ledger, and you know ours. V. Six will then right now be able to

349
01:02:58.650 --> 01:03:15.260
Patrik Stas: understands uh this. You know the the format which occupies right? So obviously we want to uh fix that uh, then, the second kind of problem which we kind of got into into into this uh ladder uh comments. Here,

350
01:03:15.380 --> 01:03:21.600
Patrik Stas: uh is that as team of Gloucester dimensions here? Um

351
01:03:23.310 --> 01:03:25.020
Patrik Stas: in um.

352
01:03:25.510 --> 01:03:31.879
Patrik Stas: In case of like other implementations, they usually assume that,

353
01:03:31.910 --> 01:03:34.629
Patrik Stas: uh, the recipient keys

354
01:03:34.660 --> 01:03:46.230
Patrik Stas: is not part of the attributes itself, but they just assume that the attribute key is always the very key assigns to the did on the ledger.

355
01:03:46.430 --> 01:04:03.449
Patrik Stas: Uh, which is not our case where we write out the recipient key separately into the attribute, and therefore we allow, like we assume, that the the ver key of a did on the ledger can be something else.

356
01:04:03.460 --> 01:04:10.679
Patrik Stas: Then the recipient where maybe the you know public institution wants to receive the messages.

357
01:04:11.170 --> 01:04:12.589
Patrik Stas: Um:

358
01:04:13.320 --> 01:04:22.460
Patrik Stas: So yeah, this is ongoing discussion. Uh, uh, obviously, we want to definitely align with the

359
01:04:22.730 --> 01:04:26.509
Patrik Stas: to improve the interoperability.

360
01:04:26.620 --> 01:04:40.970
Patrik Stas: Um, especially from the role of mobile device. At the same time, we probably, uh like want to keep, you know, back parts compatibility with the let's say with, Let's call it like our legacy format.

361
01:04:41.070 --> 01:04:50.570
Patrik Stas: Uh: So yeah, we want to support both. But uh, probably in the long term, you know, we want to obviously align with the the rest of the community.

362
01:04:50.630 --> 01:04:52.569
Patrik Stas: Uh: as much as possible.

363
01:04:56.650 --> 01:05:01.000
Patrik Stas: Yeah, uh, I guess this is uh sort of if

364
01:05:01.070 --> 01:05:06.440
Patrik Stas: uh for for this issue. And actually, I think I I

365
01:05:07.080 --> 01:05:17.999
Patrik Stas: We went through uh the agenda. So it's now time for any. Is we have ten minutes left. So there's anything to ask for discuss

366
01:05:18.180 --> 01:05:26.839
Patrik Stas: whether it's something uh, you know. I I talked about the planning plan work, or uh what there were other concerns or ideas you have.

367
01:05:27.100 --> 01:05:28.029
Patrik Stas: Uh,

368
01:05:28.690 --> 01:05:30.419
Patrik Stas: It's a free space. Now.

369
01:05:38.080 --> 01:05:39.040
ckowald: Um,

370
01:05:39.550 --> 01:05:45.260
ckowald: Patrick, I was a little bit confused with that last topic you were talking about.

371
01:05:46.150 --> 01:05:51.549
Patrik Stas: Um, Okay, it must have been I'm fairly new. I'm. Fairly new to all of this. But

372
01:05:51.950 --> 01:05:56.510
ckowald: it are you saying that what you write to the legend now is in a

373
01:05:56.630 --> 01:06:00.019
ckowald: on. Are you saying it's out of sync with what sovereign one?

374
01:06:00.170 --> 01:06:15.939
Patrik Stas: Uh: Well, yeah, so it yeah, it is. It is because um what we would be right, you know, if you use as Vcx to write your like. This kind of service attributes on the ledger.

375
01:06:16.000 --> 01:06:17.299
Patrik Stas: Um!

376
01:06:18.100 --> 01:06:20.219
Patrik Stas: It's some of the different

377
01:06:20.570 --> 01:06:27.749
Patrik Stas: uh. It's not a big problem, because it's easy. It's It's easy to fix, but it is currently different,

378
01:06:27.850 --> 01:06:29.959
Patrik Stas: and i'll show you

379
01:06:30.000 --> 01:06:31.580
Patrik Stas: exactly

380
01:06:32.640 --> 01:06:34.479
in practice.

381
01:06:35.060 --> 01:06:38.610
Patrik Stas: So if I look for the attribute transactions

382
01:06:39.440 --> 01:06:48.530
Patrik Stas: uh, this is a tribute uh written by A. Dcx. And as you can see uh, this is what we've right.

383
01:06:48.730 --> 01:06:50.429
Patrik Stas: Uh so there is

384
01:06:50.460 --> 01:06:54.769
Patrik Stas: I can be, for you know It's It's what I displayed on uh

385
01:06:55.330 --> 01:06:58.459
Patrik Stas: on the

386
01:07:00.150 --> 01:07:14.289
Patrik Stas: right, and you're saying that's not quite aligned with what sovereigns say you should write. Yes, because in in other let's say this a random one. Let's see how they write it. So

387
01:07:14.300 --> 01:07:21.399
Patrik Stas: So this is how I oftentimes other implementation righted. Uh.

388
01:07:21.670 --> 01:07:34.379
Patrik Stas: So there's this rear. It's kind of a strange uh yeah uh, but that's just how I I define it. Specified it, I think,

389
01:07:34.620 --> 01:07:46.989
Patrik Stas: probably for some historical reasons. But it is what this. So uh, it starts with endpoint, and then within that is endpoint, and I need to open up it,

390
01:07:47.480 --> 01:07:48.779
hey? Sure,

391
01:07:49.480 --> 01:07:50.689
Patrik Stas: um!

392
01:07:52.700 --> 01:07:57.770
ckowald: But this will probably change again, I think, because that's that. Looks like It's related to

393
01:07:57.920 --> 01:08:04.320
ckowald: um. You know how how a service endpoint is declared,

394
01:08:04.700 --> 01:08:05.929
ckowald: and I'm:

395
01:08:08.370 --> 01:08:18.989
Patrik Stas: Yeah. Well, it is in in the in this. So it it is draft. So I believe it can still change uh over time. I don't know how stable this is.

396
01:08:19.250 --> 01:08:20.670
Patrik Stas: Uh:

397
01:08:20.830 --> 01:08:24.469
Patrik Stas: I look for a service endpoint here

398
01:08:26.069 --> 01:08:29.620
Patrik Stas: uh this is. This is:

399
01:08:30.490 --> 01:08:38.530
Patrik Stas: Let's see. Okay. So yeah, So here it is. So in this specification. They say that you should write

400
01:08:38.850 --> 01:08:48.290
Patrik Stas: a trip transaction with this uh endpoint recurs twice, and then within the inner endpoint.

401
01:08:48.370 --> 01:09:01.000
Patrik Stas: Uh, you know, in within the inner object you can specify the endpoint field with the actual Url uh, then types and uh routing keys.

402
01:09:03.920 --> 01:09:22.359
Patrik Stas: Yeah, which is not exactly, you know, in this case. Uh, in this particular transaction this is aligned with with the sovereign draft, because it is endpoint endpoint, and the other free. Other fields are optional, so they didn't specify the here,

403
01:09:22.370 --> 01:09:38.939
Patrik Stas: whereas in you know the way Aries, Vcx Institution would would write some. I don't know endpoint on the ledger. Is that good? Rise this much bigger they will there, uh, which includes recipient teams

404
01:09:39.069 --> 01:09:51.840
Patrik Stas: uh the routing keys and service endpoint. And yeah, one. One difference is in the formatting itself, and then the second difference is, uh

405
01:09:52.109 --> 01:10:05.020
Patrik Stas: kind of more important is the fact that we write recipient kids on the ledger, whereas, according to the specification, you cannot write or like they they don't mention it

406
01:10:05.040 --> 01:10:06.260
Patrik Stas: uh,

407
01:10:06.990 --> 01:10:16.470
Patrik Stas: so they just assume that, uh the specification assumes that the recipient piece value, you know, when you resolve

408
01:10:16.790 --> 01:10:18.019
Patrik Stas: um,

409
01:10:18.340 --> 01:10:25.520
Patrik Stas: you know, when you, when you try to contact the the institution on the service endpoint.

410
01:10:25.590 --> 01:10:31.670
Patrik Stas: Uh you should simply use ver key of the given did

411
01:10:31.780 --> 01:10:40.860
Patrik Stas: uh as a recipient key. So in in this particular case, if I take a look, what is the I, what is

412
01:10:41.110 --> 01:10:44.210
Patrik Stas: of these of these did? C. Twenty-seven.

413
01:10:44.290 --> 01:10:45.240
Patrik Stas: Um,

414
01:10:50.310 --> 01:10:52.740
Patrik Stas: uh, there will be this one.

415
01:10:54.880 --> 01:10:56.540
Patrik Stas: So

416
01:10:56.560 --> 01:10:57.460
Patrik Stas: um

417
01:10:59.110 --> 01:11:07.450
Patrik Stas: yeah, what? Where? Whereas we you know with everything we write that explicitly. The sovereign uh specification

418
01:11:07.700 --> 01:11:15.750
Patrik Stas: uh assumes that you should just take that recipient from here as that as the main bar of the did.

419
01:11:18.370 --> 01:11:21.140
Patrik Stas: Does it make somewhat uh clear?

420
01:11:21.160 --> 01:11:23.579
Patrik Stas: Well done. What the issue is?

421
01:11:23.840 --> 01:11:32.449
George Mulhearn: I think I think Craig's Internet. Died, but I I can pass it on to him. It. It makes sense to me that. Um:

422
01:11:32.640 --> 01:11:33.599
George Mulhearn: Yeah.

423
01:11:33.810 --> 01:11:41.410
George Mulhearn: So it it sort of has to do with you guys needing to restructure that area service Struct

424
01:11:41.550 --> 01:11:54.299
Patrik Stas: Um, two different ones to support the legacy version as well

425
01:11:54.850 --> 01:11:56.139
Patrik Stas: um

426
01:11:57.240 --> 01:12:12.810
Patrik Stas: into this. So uh, basically this just moves here, right uh the types uh that something to look into the routing piece Uh, that's a simple one. Uh, that's It's actually the same.

427
01:12:12.840 --> 01:12:17.360
Patrik Stas: Uh he goes here and uh

428
01:12:17.790 --> 01:12:35.249
Patrik Stas: kind of the biggest issue in terms of in like compatibility. Uh would be the recipient keys. So uh it will be, you know we have to right adjust the code

429
01:12:35.350 --> 01:12:37.330
Patrik Stas: such that

430
01:12:37.800 --> 01:12:51.620
Patrik Stas: especially well, especially, for in the role of the mobile client uh mobile device which is resolving some did we have to assume that the stuff on the ledger is written in this format,

431
01:12:51.630 --> 01:13:03.090
Patrik Stas: and there is no recipient he's written uh in that attribute transaction, and it's simple this and then uh for and then I think

432
01:13:03.730 --> 01:13:10.939
Patrik Stas: for some period of time we'll implement kind of uh backwards compatibility uh extension

433
01:13:11.240 --> 01:13:15.710
Patrik Stas: such that uh, we will try to.

434
01:13:16.130 --> 01:13:27.410
Patrik Stas: We will try to also um resolve recipients from the attribute. But since nobody is really doing it this way,

435
01:13:27.590 --> 01:13:38.410
Patrik Stas: if it's missing there, which will be, in cases of you know, most into institutions or most agents use occupy the recipient keys uh won't be here

436
01:13:38.460 --> 01:13:46.239
Patrik Stas: uh so a is, we say it's have to assume that it won't be here So in that case, uh, like

437
01:13:46.610 --> 01:13:54.259
Patrik Stas: the recipient, is that the recipient is value. I think the way we implement we will implement it is first

438
01:13:54.330 --> 01:13:58.620
Patrik Stas: try to look if there is

439
01:13:58.730 --> 01:14:00.240
Patrik Stas: um

440
01:14:02.780 --> 01:14:07.119
Patrik Stas: in the

441
01:14:07.480 --> 01:14:09.809
Patrik Stas: part of

442
01:14:10.690 --> 01:14:12.900
Patrik Stas: a transaction,

443
01:14:13.030 --> 01:14:25.109
Patrik Stas: and as a fall back to, you know, to the mos of the because this is to support like the legacy we have right now, and the second step will be like, Okay, if there is spin keys, is not there

444
01:14:25.120 --> 01:14:34.900
Patrik Stas: Probably, uh this. This attribute to transaction was written by Aka, by which does not uh specify recipient is an attribute, and in that

445
01:14:34.960 --> 01:14:45.379
Patrik Stas: that case will simply uh resolve. You know, res resolve a very key for the bins, and we pulled it as a

446
01:14:46.490 --> 01:14:47.559
Patrik Stas: Yeah,

447
01:14:48.160 --> 01:14:57.319
George Mulhearn: we We resolve that as as a

448
01:14:57.690 --> 01:15:11.139
Patrik Stas: yeah, yeah, yeah, so well uh, just to ever any confusion. Basically This is how the thing will at the end look like, you know, in Arizona internally. But uh, yeah, obviously,

449
01:15:11.390 --> 01:15:25.309
Patrik Stas: um, this is what's gonna be on the ledger. And yeah, we have to. We have to it just the code to assume that this is this is what the ledger looks like, and it's probably not this. But we will want to support this for a while.

450
01:15:26.510 --> 01:15:27.590
George Mulhearn: Awesome,

451
01:15:33.240 --> 01:15:38.359
Patrik Stas: all right, uh, I think we uh ran out of time. So

452
01:15:38.470 --> 01:15:51.620
Patrik Stas: uh, I think we can close it up. Um, thanks. Everyone for attending um, and i'll be looking again to meet meet you guys uh hopefully next week.

453
01:15:52.990 --> 01:15:54.519
George Mulhearn: Great. Thank you.

454
01:15:54.630 --> 01:15:58.619
@kukgini: Okay, Thank you.

